const $=e=>document.querySelector(e),$$=e=>document.querySelectorAll(e),formatCurrency=e=>(("number"!=typeof e||isNaN(e))&&(e=0),`LKR ${e.toFixed(2).replace(/\d(?=(\d{3})+\.)/g,"$&,")}`),generateId=()=>"_"+Math.random().toString(36).substr(2,9),getDaysLeft=e=>{const t=new Date;t.setHours(0,0,0,0);const n=new Date(e);return n.setHours(0,0,0,0),Math.ceil((n-t)/864e5)},roundToTwoDecimals=e=>"number"!=typeof e||isNaN(e)?0:parseFloat(e.toFixed(2));function getCurrentDateString(){const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`}function getFormattedLocalStorageSize(e){const t=localStorage.getItem(e);if(null===t)return"N/A (No data found)";const n=t.length;return n<1024?`${n} Bytes`:n<1048576?`${(n/1024).toFixed(2)} KB`:`${(n/1048576).toFixed(2)} MB`}function displayAppVersion(){let e="N/A";try{const t=document.querySelector('meta[name="application-version"]');t?e=t.getAttribute("content"):console.warn("Application version meta tag not found.")}catch(e){console.error("Error reading application version:",e)}const t=document.getElementById("appVersionSettings");t&&(t.textContent=`Version: ${e}`);const n=document.getElementById("appVersionSetup");n&&(n.textContent=`Version: ${e}`)}function toggleCategoryVisibilityInModal(e,t,n){const a=document.getElementById(t),o=document.getElementById(n),s=e.form.elements.description||e.form.elements.modalDescription||e.form.elements.ccDescription||e.form.elements.modalCcDescription;"income"===e.value?(a&&(a.style.display="none"),o&&(o.required=!1),s&&(s.placeholder="e.g., Monthly Salary")):(a&&(a.style.display="block"),o&&(o.required=!0),s&&(s.placeholder="e.g., Lunch, Groceries"))}let state={};function getDefaultState(){return JSON.parse(JSON.stringify({transactions:[],accounts:[{id:"cash",name:"Cash",balance:0},{id:"bank_1",name:"Commercial",balance:0},{id:"bank_2",name:"HNB",balance:0},{id:"bank_3",name:"Genie",balance:0}],categories:["Food & Dining","Groceries","Transportation","Healthcare","Personal Care","Shopping","Entertainment","Education","Gifts & Donations","Travel","Subscriptions & Memberships","Bank Charges","Other"].sort(((e,t)=>e.localeCompare(t))),debts:[],receivables:[],installments:[],creditCard:{limit:0,transactions:[]},settings:{initialSetupDone:!1,showCcDashboardSection:!0,theme:"dark"}}))}function openInitialSetupWizard(){const e=$("#initialSetupModal");if(!e)return void console.error("Initial Setup Modal not found in HTML.");console.log("Opening Initial Setup Wizard...");const t=$("#setupAccountBalances");t.innerHTML="";getDefaultState().accounts.forEach((e=>{const n=document.createElement("div");let a;n.className="grid grid-cols-1 sm:grid-cols-[2fr,3fr] gap-x-3 items-center mb-2";const o='style="background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary);"';a="cash"===e.id?`<label for="setupBalance-${e.id}" class="text-sm font-medium text-gray-300 justify-self-start col-span-1 sm:col-span-1">${e.name}</label>`:`<input type="text" id="setupName-${e.id}" name="setupName-${e.id}" value="${e.name}" data-account-id="${e.id}" class="!py-1.5 !px-2 text-sm w-full rounded placeholder-gray-400 col-span-1 sm:col-span-1" ${o} placeholder="Account Name">`;const s=`<input type="number" id="setupBalance-${e.id}" name="setupBalance-${e.id}" data-account-id="${e.id}" step="0.01" placeholder="0.00 (Optional)" class="!py-1.5 !px-2 text-sm w-full rounded placeholder-gray-400 col-span-1 sm:col-span-1" ${o}>`;"cash"===e.id?n.innerHTML=`${a}<div class="sm:col-span-1"> ${s}</div>`:n.innerHTML=`<div class="col-span-1 sm:col-span-1">${a}</div><div class="col-span-1 sm:col-span-1 mt-1 sm:mt-0">${s}</div>`,t.appendChild(n)}));const n=$("#setupEnableCc"),a=$("#setupCcLimitGroup"),o=$("#setupCcLimit");n&&a&&o&&(n.checked=!0,a.style.display="block",o.required=!0,o.style.backgroundColor="var(--bg-secondary)",o.style.borderColor="var(--border-color)",o.style.color="var(--text-primary)",n.onchange=()=>{n.checked?(a.style.display="block",o.required=!0):(a.style.display="none",o.required=!1,o.value="")});const s=$("#setupCategoriesList"),i=$("#setupNewCategoryName"),r=$("#setupAddCategoryBtn");let c=[...getDefaultState().categories];i&&(i.style.backgroundColor="var(--bg-secondary)",i.style.borderColor="var(--border-color)",i.style.color="var(--text-primary)");const l=()=>{s&&(s.innerHTML="",c.sort(((e,t)=>e.localeCompare(t))).forEach((e=>{const t=document.createElement("div");t.className="flex justify-between items-center p-2 rounded text-sm",t.style.backgroundColor="var(--bg-secondary)",t.style.borderColor="var(--border-color)",t.style.borderWidth="1px",t.innerHTML=`\n              <span>${e}</span>\n              <button type="button" class="text-red-400 hover:text-red-300 text-xs ml-2" data-category-name="${e}" title="Remove">\n                  <i class="fas fa-times"></i>\n              </button>\n          `,t.querySelector("button").onclick=e=>{const t=e.currentTarget.dataset.categoryName;c=c.filter((e=>e!==t)),l()},s.appendChild(t)})))};r&&(r.onclick=()=>{const e=i.value.trim();e&&!c.some((t=>t.toLowerCase()===e.toLowerCase()))?(c.push(e),l(),i.value=""):e&&showNotification(`Category "${e}" already exists.`,"warning"),i.focus()}),i&&(i.onkeypress=e=>{"Enter"===e.key&&(e.preventDefault(),r&&r.click())}),l(),$("#initialSetupForm").onsubmit=handleInitialSetupSubmit,$("#setupImportInput").onchange=handleSetupImport,e.style.display="block",displayAppVersion()}function handleInitialSetupSubmit(e){e.preventDefault(),console.log("Handling initial setup form submission...");let t=getDefaultState();const n=getDefaultState().accounts;t.accounts=n.map((e=>{const t=$(`#setupName-${e.id}`),n=$(`#setupBalance-${e.id}`);let a=e.name;if("cash"!==e.id&&t){const n=t.value.trim();n?a=n:console.warn(`Account name for ${e.id} was left empty, using default: ${e.name}`)}let o=0;if(n){const e=n.value.trim();if(""!==e&&null!==e){const t=parseFloat(e);o=isNaN(t)?0:t}}return{id:e.id,name:a,balance:roundToTwoDecimals(o)}}));const a=$("#setupEnableCc").checked;if(t.settings.showCcDashboardSection=a,a){const e=$("#setupCcLimit").value.trim();if(""===e||null===e)t.creditCard.limit=0;else{const n=parseFloat(e);t.creditCard.limit=roundToTwoDecimals(isNaN(n)||n<0?0:n)}}else t.creditCard.limit=0;const o=[];$$("#setupCategoriesList span").forEach((e=>o.push(e.textContent))),t.categories=o.length>0?o.sort(((e,t)=>e.localeCompare(t))):getDefaultState().categories,t.settings.initialSetupDone=!0,state=t,saveData(),closeModal("initialSetupModal"),initializeUI(!0),showNotification("Setup complete! Welcome to Kaasi.","success",5e3)}function handleSetupImport(e){const t=e.target.files[0];if(!t)return;console.log("Importing data from setup wizard...");const n=new FileReader;n.onload=t=>{let n;try{if(n=JSON.parse(t.target.result),!n||"object"!=typeof n)throw new Error("Invalid data structure in imported file.");Array.isArray(n.transactions)&&n.transactions.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount))})),Array.isArray(n.accounts)&&n.accounts.forEach((e=>{"number"==typeof e.balance&&(e.balance=roundToTwoDecimals(e.balance))})),Array.isArray(n.debts)&&n.debts.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.originalAmount&&(e.originalAmount=roundToTwoDecimals(e.originalAmount)),"number"==typeof e.remainingAmount&&(e.remainingAmount=roundToTwoDecimals(e.remainingAmount))})),Array.isArray(n.receivables)&&n.receivables.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.originalAmount&&(e.originalAmount=roundToTwoDecimals(e.originalAmount)),"number"==typeof e.remainingAmount&&(e.remainingAmount=roundToTwoDecimals(e.remainingAmount))})),Array.isArray(n.installments)&&n.installments.forEach((e=>{"number"==typeof e.monthlyAmount&&(e.monthlyAmount=roundToTwoDecimals(e.monthlyAmount)),"number"==typeof e.originalFullAmount&&(e.originalFullAmount=roundToTwoDecimals(e.originalFullAmount))})),n.creditCard&&"object"==typeof n.creditCard&&("number"==typeof n.creditCard.limit&&(n.creditCard.limit=roundToTwoDecimals(n.creditCard.limit)),Array.isArray(n.creditCard.transactions)&&n.creditCard.transactions.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.paidAmount&&(e.paidAmount=roundToTwoDecimals(e.paidAmount))}))),state=getDefaultState(),state=deepMerge(state,n),ensureDefaultAccounts(),ensureDefaultCategories(),state.accounts.forEach((e=>{isNaN(e.balance)||"number"!=typeof e.balance?e.balance=0:e.balance=roundToTwoDecimals(e.balance)})),state.creditCard?(isNaN(state.creditCard.limit)||"number"!=typeof state.creditCard.limit?state.creditCard.limit=0:state.creditCard.limit=roundToTwoDecimals(state.creditCard.limit),Array.isArray(state.creditCard.transactions)?state.creditCard.transactions.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.paidAmount?e.paidAmount=roundToTwoDecimals(e.paidAmount):e.paidAmount=0})):state.creditCard.transactions=[]):state.creditCard={limit:0,transactions:[]},state.settings||(state.settings=getDefaultState().settings),state.settings.initialSetupDone=!0,saveData(),closeModal("initialSetupModal"),initializeUI(!0),showNotification("Data imported and sanitized successfully from setup wizard!","success")}catch(e){console.error("Import failed during setup:",e),showNotification(`Import failed: ${e.message}. Please try manual setup or a valid file.`,"error",1e4)}finally{e.target.value=null}},n.onerror=()=>{showNotification("Failed to read the import file.","error"),e.target.value=null},n.readAsText(t)}const STORAGE_KEY="KaasiData";function saveData(){try{localStorage.setItem(STORAGE_KEY,JSON.stringify(state)),console.log("Data saved successfully.")}catch(e){console.error("Error saving data to localStorage:",e),"QuotaExceededError"===e.name?showNotification("Error: Local storage quota exceeded. Data is too large to save.","error",1e4):showNotification("Error saving data. Check console.","error",1e4)}}function loadData(){const e=localStorage.getItem(STORAGE_KEY);let t=null;if(e){console.log("Uncompressed data found. Attempting to parse...");try{t=JSON.parse(e)}catch(e){console.error("Error parsing data from localStorage:",e),showNotification("Error loading data. Data might be corrupted. Starting fresh.","error",8e3)}}state=getDefaultState(),t&&"object"==typeof t?(console.log("Merging loaded data into default state structure..."),state=deepMerge(state,t),console.log("Data merged successfully.")):e&&!t?console.log("Previous data existed but was unparsable. Using fresh default state."):console.log("No saved data found or data was null/invalid. Starting with fresh default state.");const n=getDefaultState();if(state.settings&&"object"==typeof state.settings)for(const e in n.settings)void 0===state.settings[e]&&(state.settings[e]=n.settings[e]);else console.warn("State.settings was missing or invalid after merge. Resetting to default settings structure."),state.settings={...n.settings};if(state.creditCard&&"object"==typeof state.creditCard){for(const e in n.creditCard)void 0===state.creditCard[e]&&(state.creditCard[e]=n.creditCard[e]);Array.isArray(state.creditCard.transactions)||(state.creditCard.transactions=[])}else console.warn("State.creditCard was missing or invalid after merge. Resetting to default creditCard structure."),state.creditCard={...n.creditCard},Array.isArray(state.creditCard.transactions)||(state.creditCard.transactions=[]);Array.isArray(state.transactions)||(state.transactions=[]),Array.isArray(state.accounts)||(state.accounts=[]),Array.isArray(state.categories)||(state.categories=[]),Array.isArray(state.debts)||(state.debts=[]),Array.isArray(state.receivables)||(state.receivables=[]),Array.isArray(state.installments)||(state.installments=[]),ensureDefaultAccounts(),ensureDefaultCategories(),state.accounts.forEach((e=>{(isNaN(e.balance)||"number"!=typeof e.balance)&&(e.balance=0)})),(isNaN(state.creditCard.limit)||"number"!=typeof state.creditCard.limit)&&(state.creditCard.limit=0),state.creditCard.transactions.forEach((e=>{void 0!==e.paidAmount&&"number"==typeof e.paidAmount||(e.paidAmount=0),void 0===e.paidOff&&(e.paidOff=e.paidAmount>=e.amount-.005),e.timestamp||(e.timestamp=new Date(e.date).getTime())})),state.transactions.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.date).getTime())})),state.debts.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.dueDate).getTime()),void 0===e.originalAmount&&(e.originalAmount=e.amount)})),state.receivables.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.dateGiven).getTime()),void 0===e.originalAmount&&(e.originalAmount=e.amount)})),state.installments.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.startDate).getTime())})),console.log("Final state after loadData and integrity checks:",JSON.parse(JSON.stringify(state)))}function deepMerge(e,t){for(const n in t)if(t.hasOwnProperty(n)){const a=t[n],o=e[n];a&&"object"==typeof a&&!Array.isArray(a)?(o&&"object"==typeof o&&!Array.isArray(o)||(e[n]={}),deepMerge(e[n],a)):void 0!==a&&(e[n]=a)}return e}function ensureDefaultAccounts(){const e=getDefaultState().accounts;if(!Array.isArray(state.accounts))return console.warn("state.accounts was not an array. Resetting to default accounts structure."),state.accounts=JSON.parse(JSON.stringify(e)),void state.accounts.forEach((e=>e.balance=0));e.forEach((e=>{const t=state.accounts.find((t=>t.id===e.id));t?("string"!=typeof t.name&&(t.name=e.name),("number"!=typeof t.balance||isNaN(t.balance))&&(console.warn(`Balance for account '${t.name}' was invalid. Resetting to 0.`),t.balance=0)):(console.warn(`Default account '${e.name}' (ID: ${e.id}) was missing. Adding it.`),state.accounts.push({...e,balance:0}))}))}function ensureDefaultCategories(){const e=getDefaultState().categories;state.categories&&Array.isArray(state.categories)||(console.warn("state.categories was missing or not an array. Initializing as empty array."),state.categories=[]),0===state.categories.length&&(console.warn("state.categories is empty. Populating with default categories."),state.categories=JSON.parse(JSON.stringify(e))),state.categories.sort(((e,t)=>e.localeCompare(t)));const t="Other";state.categories.some((e=>e.toLowerCase()===t.toLowerCase()))||(console.warn("'Other' category was missing. Adding it back."),state.categories.push(t),state.categories.sort(((e,t)=>e.localeCompare(t))))}function showNotification(e,t="success",n=4e3){const a=$("#notificationArea");if(!a)return;const o=document.createElement("div");let s,i;switch(t){case"error":s="bg-red-600",i="text-white";break;case"warning":s="bg-yellow-500",i="text-black";break;case"info":s="bg-blue-500",i="text-white";break;default:s="bg-green-600",i="text-white"}o.className=`p-3 rounded-md shadow-lg text-sm font-medium transition-all duration-300 ease-in-out transform translate-x-full opacity-0 ${s} ${i}`,o.textContent=e,a.appendChild(o),o.offsetWidth,requestAnimationFrame((()=>{o.classList.remove("translate-x-full","opacity-0"),o.classList.add("translate-x-0","opacity-100")})),setTimeout((()=>{o.classList.remove("translate-x-0","opacity-100"),o.classList.add("translate-x-full","opacity-0"),o.addEventListener("transitionend",(()=>o.remove()),{once:!0})}),n)}function populateDropdowns(){const e=$$('select[name="account"], select[name="transferFrom"], select[name="transferTo"], select[name="receivableSourceAccount"], select[name="payDebtAccount"], select[name="recPaymentAccount"], select[name="instPayAccount"], select[name="ccPayFromAccount"], #modalAccount, #recSourceAccountAdd, #recSourceAccountEdit, #modalCcPayFromAccount, #modalInstPayAccount, #modalPayDebtAccount, #modalTransferFrom, #modalTransferTo'),t=$$("#category, #modalCategory, #modalPayDebtCategory, #modalInstPayCategory, #modalCcPayCategory");e.forEach((e=>{if(!e)return;const t=e.value;e.innerHTML="",state.accounts.forEach((t=>{const n=document.createElement("option");n.value=t.id,n.textContent=`${t.name} (${formatCurrency(t.balance)})`,e.appendChild(n)})),Array.from(e.options).some((e=>e.value===t))?e.value=t:e.options.length}));t.forEach((e=>{if(!e)return;const t=e.value;e.innerHTML="";const n=document.createElement("option");n.value="",n.textContent="---- Select Category ----",n.disabled=!0,e.appendChild(n);const a="Other";let o=state.categories.filter((e=>"income"!==e.toLowerCase()&&"credit card payment"!==e.toLowerCase()&&e.toLowerCase()!==a.toLowerCase()));if(o.sort(((e,t)=>e.localeCompare(t))),"modalPayDebtCategory"===e.id){const e="Debt Repayment";!o.includes(e)&&state.categories.some((t=>t.toLowerCase()===e.toLowerCase()))}if(o.forEach((t=>{const n=document.createElement("option");n.value=t,n.textContent=t,e.appendChild(n)})),state.categories.some((e=>e.toLowerCase()===a.toLowerCase()))){const t=document.createElement("option");t.value=a,t.textContent=a,e.appendChild(t)}t&&Array.from(e.options).some((e=>e.value===t&&""!==e.value))?e.value=t:"modalPayDebtCategory"===e.id&&state.categories.includes("Debt Repayment")?e.value="Debt Repayment":e.value=""}))}function renderDashboard(){let e=0;state.accounts.forEach((t=>{const n=$(`#accountBalance-${t.id}`);if(n){const e=n.querySelector("p:first-child"),a=n.querySelector("p:last-child");e&&(e.textContent=t.name),a&&(a.textContent=formatCurrency(t.balance))}e+=t.balance})),$("#totalBalance").textContent=formatCurrency(e);const t=state.receivables.filter((e=>"cash"===e.type||"cc"===e.type&&e.sourceAccount)).reduce(((e,t)=>e+t.remainingAmount),0);$("#totalPotentialBalance").textContent=formatCurrency(e+t),$("#totalOwedToMe").textContent=`Total: ${formatCurrency(state.receivables.reduce(((e,t)=>e+t.remainingAmount),0))}`,$("#totalOwed").textContent=`Total: ${formatCurrency(state.debts.reduce(((e,t)=>e+t.remainingAmount),0))}`,$("#totalInstallmentsLeft").textContent=`Total Left: ${formatCurrency(state.installments.reduce(((e,t)=>e+t.monthlyAmount*t.monthsLeft),0))}`,renderRecentTransactions(),renderDebtList(),renderReceivableList(),renderInstallmentList(),renderCreditCardSection(),renderMonthlyOverviewChart(),renderYearlyAndQuickStats()}function renderYearlyAndQuickStats(){const e=new Date,t=e.getFullYear(),n=new Date(t,0,1),a=new Date(e);a.setHours(23,59,59,999);const o=new Date(e);o.setHours(0,0,0,0);const s=new Date(a),i=new Date(a);i.setDate(i.getDate()-6),i.setHours(0,0,0,0);const r=new Date(i);r.setDate(r.getDate()-1),r.setHours(23,59,59,999);const c=new Date(r);c.setDate(c.getDate()-6),c.setHours(0,0,0,0);const l=new Date(o);l.setDate(o.getDate()-1);let d=0,m=0,u=0,p=0,f=0,y=0;state.transactions.forEach((e=>{const b=new Date(e.date);if(isNaN(b.getTime()))return;const g=new Date(b);g.setHours(12,0,0,0),g>=n&&g.getFullYear()===t&&("income"===e.type&&(d+=e.amount),"expense"===e.type&&(m+=e.amount)),"expense"===e.type&&(g>=i&&g<=s&&(u+=e.amount),g>=c&&g<=r&&(p+=e.amount),g>=o&&g<=a&&(f+=e.amount),g>=l&&g<o&&(y+=e.amount))})),$("#yearlyTotals").textContent=`Yearly: Earned ${formatCurrency(d)} / Spent ${formatCurrency(m)}`;$("#quickStats").innerHTML=`Today: ${formatCurrency(f)} <span id="todaySpendingIndicator"></span> | Past 7 Days: ${formatCurrency(u)} <span id="weekSpendingIndicator"></span>`;const b=$("#todaySpendingIndicator");b.innerHTML=f>y&&y>=0?`<i class="fas fa-arrow-up text-indicator-bad spending-indicator" title="More than yesterday (${formatCurrency(y)})"></i>`:f<y&&y>0?`<i class="fas fa-arrow-down text-indicator-good spending-indicator" title="Less than yesterday (${formatCurrency(y)})"></i>`:"";const g=$("#weekSpendingIndicator");g.innerHTML=u>p&&p>=0?`<i class="fas fa-arrow-up text-indicator-bad spending-indicator" title="More than previous 7 days (${formatCurrency(p)})"></i>`:u<p&&p>0?`<i class="fas fa-arrow-down text-indicator-good spending-indicator" title="Less than previous 7 days (${formatCurrency(p)})"></i>`:""}function openShortcutsHelpModal(){const e=$("#shortcutsHelpModal"),t=$("#shortcutsList");if(!e||!t)return console.error("Shortcut help modal elements not found!"),void showNotification("Could not display shortcuts help.","error");t.innerHTML="",[{key:"-",action:"Start an Expense Transaction."},{key:"+",action:"Start an Income Transaction."},{key:"M",action:"Open Monthly Breakdown."},{key:"S",action:"Open Settings (In Dashboard)."},{key:"S",action:"Start Search (In Monthly Breakdown)."},{key:"C",action:"Start a CC Transaction."},{key:"D",action:"View All Debts."},{key:"R",action:"View All Receivables."},{key:"T",action:"Transfer Money."},{key:"Ctrl + E",action:"Export Data."},{key:"Ctrl + I",action:"Import Data."},{key:"← / →",action:"Navigate Month Tabs in Breakdown."}].forEach((e=>{const n=document.createElement("li");n.className="flex justify-between items-center py-2 px-1 border-b border-gray-700 last:border-b-0";const a=document.createElement("span");a.className="font-semibold text-accent-primary w-1/3",a.textContent=e.key;const o=document.createElement("span");o.className="text-gray-300 text-sm text-left flex-grow px-2",o.textContent=e.action;const s=document.createElement("span");s.className="text-xs text-gray-500 text-right w-1/4 italic",s.textContent=e.context||"",n.appendChild(a),n.appendChild(o),e.context&&n.appendChild(s),t.appendChild(n)})),e.style.display="block"}function handleKeyboardShortcuts(e){const t=document.activeElement,n=t&&("INPUT"===t.tagName||"SELECT"===t.tagName||"TEXTAREA"===t.tagName||t.isContentEditable),a=e.ctrlKey||e.altKey||e.metaKey,o="block"===$("#monthlyViewModal")?.style.display,s="block"===$("#settingsModal")?.style.display;$("#transferMoneyModal")?.style.display,$("#debtsViewModal")?.style.display,$("#receivablesViewModal")?.style.display;if(!e.ctrlKey||"e"!==e.key&&"E"!==e.key){if(!e.ctrlKey||"i"!==e.key&&"I"!==e.key){if(!(a&&"Escape"!==e.key||n&&"Escape"!==e.key))switch(e.key){case"-":if(!n){e.preventDefault();const t=$("#transactionType"),n=$("#amount");t&&n&&(t.value="expense",t.dispatchEvent(new Event("change")),n.focus(),console.log("Shortcut: '-' pressed for Expense"))}break;case"+":case"=":if(!n){e.preventDefault();const t=$("#transactionType"),n=$("#amount");t&&n&&(t.value="income",t.dispatchEvent(new Event("change")),n.focus(),console.log("Shortcut: '+' pressed for Income"))}break;case"m":case"M":if(!n){e.preventDefault();const t=$("#monthlyViewBtn");t&&("block"!==$("#monthlyViewModal")?.style.display?(t.click(),console.log("Shortcut: 'm' pressed, opening Monthly View")):(closeModal("monthlyViewModal"),console.log("Shortcut: 'm' pressed, closing Monthly View")))}break;case"s":case"S":if(o&&!n){e.preventDefault();const t=$("#monthlySearchInput");t&&(t.focus(),console.log("Shortcut: 's' pressed, focusing Monthly Search"))}else if(!o&&!s&&!n){e.preventDefault();const t=$("#settingsBtn");t&&("block"!==$("#settingsModal")?.style.display?(t.click(),console.log("Shortcut: 's' pressed, opening Settings")):(closeModal("settingsModal"),console.log("Shortcut: 's' pressed, closing Settings")))}break;case"Escape":const a=$("#monthlySearchInput");if(a&&document.activeElement===a&&a.value){e.preventDefault();const t=$("#clearMonthlySearchBtn");t&&(t.click(),console.log("Shortcut: Escape pressed, clearing Monthly Search"))}else{const a=["confirmationModal","formModal","ccHistoryModal","cashCounterModal","debtsViewModal","receivablesViewModal","transferMoneyModal","monthlyViewModal","settingsModal"];let o=!1;for(const t of a){const n=$(`#${t}`);if(n&&"block"===n.style.display){e.preventDefault(),closeModal(t),console.log(`Shortcut: Escape pressed, closing modal ${t}`),o=!0;break}}!o&&n&&(t.blur(),console.log("Shortcut: Escape pressed, blurring active input field"))}break;case"c":case"C":if(!n){e.preventDefault();const t=$("#creditCardDashboardSection"),n=$("#ccAmount");t&&"none"!==t.style.display&&n?(n.focus(),console.log("Shortcut: 'c' pressed, focusing CC Amount")):t&&"none"===t.style.display&&showNotification("Credit Card section is currently hidden. Enable in Settings.","info")}break;case"d":case"D":if(!n){e.preventDefault();const t=$("#viewDebtsBtn");t&&("block"!==$("#debtsViewModal")?.style.display?(t.click(),console.log("Shortcut: 'd' pressed, opening Debts View")):(closeModal("debtsViewModal"),console.log("Shortcut: 'd' pressed, closing Debts View")))}break;case"r":case"R":if(!n){e.preventDefault();const t=$("#viewReceivablesBtn");t&&("block"!==$("#receivablesViewModal")?.style.display?(t.click(),console.log("Shortcut: 'r' pressed, opening Receivables View")):(closeModal("receivablesViewModal"),console.log("Shortcut: 'r' pressed, closing Receivables View")))}break;case"t":case"T":if(!n){e.preventDefault();const t=$("#openTransferModalBtn");t&&("block"!==$("#transferMoneyModal")?.style.display?(t.click(),console.log("Shortcut: 't' pressed, opening Transfer Modal")):(closeModal("transferMoneyModal"),console.log("Shortcut: 't' pressed, closing Transfer Modal")))}break;case"ArrowLeft":o&&!n&&(e.preventDefault(),navigateMonthTabs(-1),console.log("Shortcut: ArrowLeft pressed for previous month"));break;case"ArrowRight":o&&!n&&(e.preventDefault(),navigateMonthTabs(1),console.log("Shortcut: ArrowRight pressed for next month"))}}else if(!n){e.preventDefault();const t=$("#importDataInput"),n=$("#settingsModal");if(n&&"block"!==n.style.display)openSettingsModal(),setTimeout((()=>{const e=Array.from($$("#settingsTabsContainer button")).find((e=>"Data"===e.textContent));e&&e.click(),t&&t.click()}),100);else if(t){const e=Array.from($$("#settingsTabsContainer button")).find((e=>"Data"===e.textContent));e&&e.click(),t.click()}console.log("Shortcut: Ctrl+I pressed for Import Data")}}else n||(e.preventDefault(),exportData(),console.log("Shortcut: Ctrl+E pressed for Export Data"))}function navigateMonthTabs(e){const t=$$("#monthTabs .tab-button");if(0===t.length)return;let n=-1;if(t.forEach(((e,t)=>{e.classList.contains("active")&&(n=t)})),-1!==n){let a=n+e;a<0?a=t.length-1:a>=t.length&&(a=0),t[a].click()}else if(t.length>0){const e=(new Date).getMonth(),n=$("#yearSelector"),a=n?parseInt(n.value):(new Date).getFullYear(),o=$(`#monthTabs .tab-button[data-month="${e}"][data-year="${a}"]`)||t[0];o&&o.click()}}function renderRecentTransactions(){const e=$("#recentTransactionsList");if(!e)return;e.innerHTML="";const t=[...state.transactions].sort(((e,t)=>new Date(t.date).setHours(0,0,0,0)-new Date(e.date).setHours(0,0,0,0)||t.timestamp-e.timestamp)).slice(0,10);0!==t.length?t.forEach((t=>{const n=document.createElement("div");n.className="flex justify-between items-center p-2 rounded bg-gray-700/50 text-sm transition-colors hover:bg-gray-700/80";const a=state.accounts.find((e=>e.id===t.account)),o=a?a.name:"Unknown Acct",s="income"===t.type,i=s?"text-income":"text-expense";let r=`${new Date(t.date).toLocaleDateString([],{day:"2-digit",month:"short"})}`;r+=` - ${o}`,!s&&t.category?r+=` | ${t.category}`:s||t.category||(r+=" | Uncategorized"),n.innerHTML=`\n      <div class="flex-grow mr-2 overflow-hidden">\n        <p class="font-medium truncate ${i}" title="${t.description}">${t.description}</p>\n        <p class="text-xs text-gray-400">${r}</p>\n      </div>\n      <span class="font-semibold whitespace-nowrap ${i}">${s?"+":"-"}${formatCurrency(t.amount)}</span>\n      <div class="edit-btn-container flex-shrink-0">\n        <button class="text-xs accent-text hover:text-accent-hover focus:outline-none" onclick="openEditTransactionForm('${t.id}', event)" title="Edit"><i class="fas fa-edit"></i></button>\n        <button class="text-xs text-gray-500 hover:text-expense focus:outline-none" onclick="deleteTransaction('${t.id}',event)" title="Delete"><i class="fas fa-times"></i></button>\n      </div>`,e.appendChild(n)})):e.innerHTML='<p class="text-gray-400 text-sm">No transactions yet.</p>'}function renderDebtList(){const e=$("#debtModalListContainer");if(!e)return void console.warn("#debtModalListContainer element not found. Debts modal might not be open.");if(e.innerHTML="",0===state.debts.length)return void(e.innerHTML='<p class="text-gray-400 text-sm text-center py-4">No debts recorded.</p>');const t=state.debts.reduce(((e,t)=>{const n=t.who.trim();return e[n]||(e[n]={totalOwedTo:0,items:[]}),e[n].totalOwedTo+=t.remainingAmount,e[n].items.push(t),e}),{}),n=Object.keys(t).sort(((e,t)=>e.localeCompare(t)));0!==n.length?n.forEach((n=>{const a=t[n],o=`modal-debt-creditor-${generateId()}`,s=document.createElement("div");s.className="mb-3 border border-gray-700 rounded-md overflow-hidden shadow-sm";const i=document.createElement("div");i.className="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-600/50 transition-colors",i.style.backgroundColor="var(--bg-tertiary)",i.innerHTML=` \n      <h4 class="text-md font-semibold text-gray-100">${n}</h4>\n      <div class="flex items-center">\n        <span class="text-md font-semibold text-expense mr-3">${formatCurrency(a.totalOwedTo)}</span>\n        <span class="toggle-icon text-gray-400"><i class="fas fa-chevron-down text-xs"></i></span>\n      </div>\n    `,s.appendChild(i);const r=document.createElement("div");r.className="day-transactions-container",r.id=o,r.style.maxHeight="0px",r.style.backgroundColor="var(--bg-secondary)",a.items.sort(((e,t)=>new Date(e.dueDate)-new Date(t.dueDate))).forEach((e=>{const t=getDaysLeft(e.dueDate);let n,a;t<0?(n=`Overdue by ${Math.abs(t)} day(s)`,a="text-expense font-medium"):0===t?(n="Due Today",a="text-warning font-medium"):(n=`${t} day(s) left`,a="text-gray-300");const o=document.createElement("div");o.className="text-sm py-2 px-3 border-b border-gray-700 last:border-b-0",o.innerHTML=`\n          <div class="flex justify-between items-start mb-1">\n            <div>\n              <p class="font-medium text-gray-200">${e.why}</p>\n              <p class="text-xs ${a}">${n}</p>\n            </div>\n            <span class="font-semibold text-expense">${formatCurrency(e.remainingAmount)}</span>\n          </div>\n          <div class="flex justify-between items-center text-xs text-gray-500 mt-1">\n            <span>Due: ${new Date(e.dueDate).toLocaleDateString()}</span>\n            <div class="edit-btn-container">\n              <button class="link-style text-xs mr-2 accent-text hover:text-accent-hover" onclick="openEditDebtForm('${e.id}')">Edit</button>\n              <button class="link-style text-xs mr-2 text-income hover:opacity-80" onclick="openPayDebtForm('${e.id}')">Pay</button>\n              <button class="text-gray-500 hover:text-expense text-xs focus:outline-none" onclick="deleteDebt('${e.id}')" title="Delete"><i class="fas fa-times"></i></button>\n            </div>\n          </div>\n        `,r.appendChild(o)})),s.appendChild(r),i.onclick=()=>{const e=i.querySelector(".toggle-icon i");"0px"===r.style.maxHeight?(r.style.maxHeight=r.scrollHeight+"px",e&&(e.classList.remove("fa-chevron-down"),e.classList.add("fa-chevron-up"))):(r.style.maxHeight="0px",e&&(e.classList.remove("fa-chevron-up"),e.classList.add("fa-chevron-down")))},e.appendChild(s)})):e.innerHTML='<p class="text-gray-400 text-sm text-center py-4">No debts to display by creditor.</p>'}function renderReceivableList(){const e=$("#receivableModalListContainer");if(!e)return void console.warn("#receivableModalListContainer element not found. Receivables modal might not be open.");e.innerHTML="";const t=state.receivables.filter((e=>"cash"===e.type||!e.type)),n=state.receivables.filter((e=>"cc"===e.type));if(0===state.receivables.length)return void(e.innerHTML='<p class="text-gray-400 text-sm text-center py-4">No receivables recorded.</p>');const a=(t,n)=>{const a=document.createElement("div");a.className="mb-6";const o=document.createElement("div");o.className="flex justify-between items-center border-b border-gray-500 pb-2 mb-3";const s=document.createElement("h3");s.className="text-xl font-semibold text-gray-100",s.textContent=t,o.appendChild(s);const i=n.reduce(((e,t)=>e+t.remainingAmount),0),r=document.createElement("span");if(r.className="text-base font-normal text-gray-100",r.textContent=`Total: ${formatCurrency(i)}`,o.appendChild(r),a.appendChild(o),0===n.length){const n=document.createElement("p");return n.className="text-gray-400 text-sm pl-1",n.textContent=`No ${t.replace(" Loans","").toLowerCase()} recorded.`,a.appendChild(n),void e.appendChild(a)}const c=n.reduce(((e,t)=>{const n=t.who.trim();return e[n]||(e[n]={totalOwed:0,items:[]}),e[n].totalOwed+=t.remainingAmount,e[n].items.push(t),e}),{}),l=Object.keys(c).sort(((e,t)=>e.localeCompare(t)));if(0===l.length){const e=document.createElement("p");e.className="text-gray-400 text-sm pl-1",e.textContent=`No receivables to display for ${t.toLowerCase()}.`,a.appendChild(e)}else l.forEach((e=>{const n=c[e],o=`modal-receivable-${t.toLowerCase().replace(/[^a-z0-9]/g,"")}-${generateId()}`,s=document.createElement("div");s.className="mb-3 border border-gray-700 rounded-md overflow-hidden shadow-sm";const i=document.createElement("div");i.className="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-600/50 transition-colors",i.style.backgroundColor="var(--bg-tertiary)",i.innerHTML=`\n          <h4 class="text-md font-semibold text-gray-100">${e}</h4>\n          <div class="flex items-center">\n            <span class="text-md font-semibold text-income mr-3">${formatCurrency(n.totalOwed)}</span>\n            <span class="toggle-icon text-gray-400"><i class="fas fa-chevron-down text-xs"></i></span>\n          </div>\n        `,s.appendChild(i);const r=document.createElement("div");r.className="day-transactions-container",r.id=o,r.style.maxHeight="0px",r.style.backgroundColor="var(--bg-secondary)",n.items.sort(((e,t)=>new Date(t.dateGiven)-new Date(e.dateGiven))).forEach((e=>{const t=state.accounts.find((t=>t.id===e.sourceAccount));let n="";"cash"===e.type?n=`(From: ${t?.name||"Unknown"})`:"cc"===e.type&&(n="(Via CC)");const a=document.createElement("div");a.className="text-sm py-2 px-3 border-b border-gray-700 last:border-b-0",a.innerHTML=`\n              <div class="flex justify-between items-start mb-1">\n                <div>\n                  <p class="font-medium text-gray-200">${e.why}</p>\n                  <p class="text-xs text-gray-400">${n}</p>\n                </div>\n                <span class="font-semibold text-income">${formatCurrency(e.remainingAmount)}</span>\n              </div>\n              <div class="flex justify-between items-center text-xs text-gray-500 mt-1">\n                <span>Given: ${new Date(e.dateGiven).toLocaleDateString()}</span>\n                <div class="edit-btn-container">\n                  <button class="link-style text-xs mr-2 accent-text hover:text-accent-hover" onclick="openEditReceivableForm('${e.id}')">Edit</button>\n                  <button class="link-style text-xs mr-2 text-income hover:opacity-80" onclick="openReceivePaymentForm('${e.id}')">Receive</button>\n                  <button class="text-gray-500 hover:text-expense text-xs focus:outline-none" onclick="deleteReceivable('${e.id}')" title="Delete"><i class="fas fa-times"></i></button>\n                </div>\n              </div>\n            `,r.appendChild(a)})),s.appendChild(r),i.onclick=()=>{const e=i.querySelector(".toggle-icon i");"0px"===r.style.maxHeight?(r.style.maxHeight=r.scrollHeight+"px",e&&(e.classList.remove("fa-chevron-down"),e.classList.add("fa-chevron-up"))):(r.style.maxHeight="0px",e&&(e.classList.remove("fa-chevron-up"),e.classList.add("fa-chevron-down")))},a.appendChild(s)}));e.appendChild(a)};a("Cash/Bank Loans",t),a("Credit Card Loans",n)}function renderInstallmentList(){const e=$("#installmentList");if(!e)return;e.innerHTML="";const t=[...state.installments].sort(((e,t)=>{const n=new Date(e.startDate);n.setMonth(n.getMonth()+e.totalMonths);const a=new Date(t.startDate);return a.setMonth(a.getMonth()+t.totalMonths),n-a}));0!==t.length?t.forEach((t=>{const n=new Date(t.startDate);n.setMonth(n.getMonth()+t.totalMonths);const a=getDaysLeft(n);let o=a<0?'<span class="text-gray-500">Finished</span>':`<span class="text-gray-300">${a} day(s) left</span>`;const s=t.monthlyAmount*t.monthsLeft,i=t.totalMonths>0?(t.totalMonths-t.monthsLeft)/t.totalMonths*100:0,r=document.createElement("div");r.className="p-3 rounded bg-gray-700/50 text-sm mb-2 flex items-center gap-x-3";const c=`\n            <div class="installment-progress-ring-container w-10 h-10 flex-shrink-0" title="${i.toFixed(0)}% Paid (${t.monthsLeft} months left)">\n                <svg class="w-full h-full" viewBox="0 0 36 36">\n                    <path class="progress-ring-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke-width="3"></path>\n                    <path class="progress-ring-circle" stroke-dasharray="${i.toFixed(2)}, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke-linecap="round" stroke-width="3"></path>\n                    <text x="18" y="17.5" class="progress-ring-text" text-anchor="middle" fill="var(--text-primary)">${t.monthsLeft}</text> \n                </svg>\n            </div>\n        `,l=`\n        <div class="edit-btn-container">\n            ${t.monthsLeft>0?`\n                <button class="text-xs accent-text hover:text-accent-hover focus:outline-none mr-2" onclick="openEditInstallmentForm('${t.id}')" title="Edit"><i class="fas fa-edit"></i></button>\n                <button class="text-xs text-income hover:opacity-80 focus:outline-none mr-2" onclick="payInstallmentMonth('${t.id}')" title="Pay Month"><i class="fas fa-credit-card"></i></button>\n            `:`\n                <button class="text-xs accent-text hover:text-accent-hover focus:outline-none mr-2" onclick="openEditInstallmentForm('${t.id}')" title="Edit"><i class="fas fa-edit"></i></button>\n            `}\n            <button class="text-xs text-gray-500 hover:text-expense focus:outline-none" onclick="deleteInstallment('${t.id}')" title="Delete"><i class="fas fa-times"></i></button>\n        </div>\n    `;r.innerHTML=`\n            ${c}\n            <div class="flex-grow">\n                <div class="flex justify-between items-start mb-1">\n                    <div>\n                        <p class="font-medium">${t.description}</p>\n                        <p class="text-xs text-gray-400">${formatCurrency(t.monthlyAmount)} / month</p>\n                    </div>\n                    <span class="font-semibold text-gray-200 whitespace-nowrap">${formatCurrency(s)} Left</span> \n                </div>\n                <div class="flex justify-between items-center text-xs text-gray-400 mt-1">\n                    <span>${t.monthsLeft} of ${t.totalMonths} months left (${o})</span>\n                    ${l}\n                </div>\n            </div>\n        `,e.appendChild(r)})):e.innerHTML='<p class="text-gray-400 text-sm">No installments.</p>'}let monthlyOverviewChartInstance=null;function renderMonthlyOverviewChart(){const e=$("#monthlyOverviewChart");if(!e)return;const t=e.getContext("2d"),n=[],a=[],o=[],s=new Date;for(let e=11;e>=0;e--){const t=new Date(s.getFullYear(),s.getMonth()-e,1),i=t.getFullYear(),r=t.getMonth();n.push(t.toLocaleString("default",{month:"short"}));let c=0,l=0;state.transactions.forEach((e=>{const t=new Date(e.date);isNaN(t.getTime())||t.getFullYear()===i&&t.getMonth()===r&&("income"===e.type?c+=e.amount:"expense"===e.type&&(l+=e.amount))})),a.push(c),o.push(l)}const i="#2a9d8f",r="#e74c3c",c=(e,t=.3)=>`rgba(${parseInt(e.slice(1,3),16)}, ${parseInt(e.slice(3,5),16)}, ${parseInt(e.slice(5,7),16)}, ${t})`;monthlyOverviewChartInstance?(monthlyOverviewChartInstance.data.labels=n,monthlyOverviewChartInstance.data.datasets[0].data=a,monthlyOverviewChartInstance.data.datasets[1].data=o,monthlyOverviewChartInstance.update()):monthlyOverviewChartInstance=new Chart(t,{type:"line",data:{labels:n,datasets:[{label:"Income",data:a,borderColor:i,backgroundColor:c(i,.3),fill:!0,tension:.4,pointBackgroundColor:i,pointBorderColor:"#fff",pointHoverRadius:6,pointHoverBackgroundColor:"#fff",pointHoverBorderColor:i},{label:"Expenses",data:o,borderColor:r,backgroundColor:c(r,.3),fill:!0,tension:.4,pointBackgroundColor:r,pointBorderColor:"#fff",pointHoverRadius:6,pointHoverBackgroundColor:"#fff",pointHoverBorderColor:r}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{beginAtZero:!0,ticks:{color:"#aaa",callback:e=>e>=1e6?"LKR "+(e/1e6).toFixed(1)+"M":e>=1e3?"LKR "+(e/1e3).toFixed(0)+"k":formatCurrency(e)},grid:{color:"rgba(255,255,255,0.1)",drawBorder:!1}},x:{ticks:{color:"#aaa"},grid:{display:!1}}},plugins:{legend:{position:"top",labels:{color:"#e0e0e0",usePointStyle:!0,boxWidth:8}},tooltip:{backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",bodyColor:"#fff",padding:10,cornerRadius:4,usePointStyle:!0,callbacks:{label:e=>`${e.dataset.label||""}: ${formatCurrency(e.parsed.y)}`}}},interaction:{mode:"index",intersect:!1}}})}function handleTransactionSubmit(e){e.preventDefault();const t=e.target,n=new FormData(t),a=n.get("transactionType"),o=parseFloat(n.get("amount")),s=n.get("account"),i="expense"===a?n.get("category"):null,r=n.get("description").trim(),c=n.get("date");if(isNaN(o)||o<=0)return void showNotification("Valid amount required.","error");if(!s)return void showNotification("Account required.","error");if("expense"===a&&!i)return void showNotification("Category required for expense.","error");if(!r)return void showNotification("Description required.","error");if(!c)return void showNotification("Date required.","error");const l=state.accounts.find((e=>e.id===s));if(!l)return void showNotification("Account not found.","error");const d=Date.now();"expense"===a&&l.balance<o&&showNotification(`Insufficient funds in ${l.name}. Transaction still added.`,"warning");const m={id:generateId(),type:a,amount:roundToTwoDecimals(o),account:s,category:i,description:r,date:c,timestamp:d};state.transactions.push(m),l.balance=roundToTwoDecimals("income"===a?l.balance+m.amount:l.balance-m.amount),isNaN(l.balance)&&(l.balance=0),showNotification(`${a.charAt(0).toUpperCase()+a.slice(1)} added.`,"success"),saveData(),renderDashboard(),populateDropdowns(),t.reset();const u=t.querySelector("#category");u&&(u.value="");const p=t.querySelector("#date");p&&(p.value=getCurrentDateString());const f=t.querySelector("#transactionType");f&&f.dispatchEvent(new Event("change")),refreshMonthlyViewIfRelevant(c)}function openEditTransactionModal(e,t){t&&t.stopPropagation();const n=state.transactions.find((t=>t.id===e));if(!n)return void showNotification("Transaction not found for editing.","error");const a=state.accounts.map((e=>`<option value="${e.id}" ${n.account===e.id?"selected":""}>${e.name} (${formatCurrency(e.balance)})</option>`)).join(""),o=state.categories.sort(((e,t)=>e.localeCompare(t))).map((e=>`<option value="${e}" ${n.category===e?"selected":""}>${e}</option>`)).join("");openFormModal("Edit Transaction",`\n            <input type="hidden" name="editTransactionId" value="${n.id}">\n            <div>\n                <label for="modalTransactionType" class="block text-sm font-medium mb-1">Type</label>\n                <select id="modalTransactionType" name="transactionType" required onchange="toggleCategoryVisibilityInModal(this, 'modalCategoryGroup', 'modalCategory')">\n                    <option value="expense" ${"expense"===n.type?"selected":""}>Expense</option>\n                    <option value="income" ${"income"===n.type?"selected":""}>Income</option>\n                </select>\n            </div>\n            <div>\n                <label for="modalAmount" class="block text-sm font-medium mb-1">Amount (LKR)</label>\n                <input type="number" id="modalAmount" name="amount" value="${n.amount.toFixed(2)}" step="0.01" min="0" placeholder="e.g., 1500.50" required>\n            </div>\n            <div>\n                <label for="modalAccount" class="block text-sm font-medium mb-1">Account</label>\n                <select id="modalAccount" name="account" required>${a}</select>\n            </div>\n            <div id="modalCategoryGroup" style="display: ${"expense"===n.type?"block":"none"};">\n                <label for="modalCategory" class="block text-sm font-medium mb-1">Category</label>\n                <select id="modalCategory" name="category" ${"expense"===n.type?"required":""}>${o}</select>\n            </div>\n            <div>\n                <label for="modalDescription" class="block text-sm font-medium mb-1">Description</label>\n                <input type="text" id="modalDescription" name="description" value="${n.description}" placeholder="e.g., Lunch with friends" required>\n            </div>\n            <div>\n                <label for="modalDate" class="block text-sm font-medium mb-1">Date</label>\n                <input type="date" id="modalDate" name="date" value="${n.date}" required>\n            </div>\n            <button type="submit" class="btn btn-primary w-full"><i class="fas fa-save"></i> Update Transaction</button>\n        `,handleEditTransactionModalSubmit);const s=document.getElementById("modalTransactionType");s&&toggleCategoryVisibilityInModal(s,"modalCategoryGroup","modalCategory")}function handleEditTransactionModalSubmit(e){e.preventDefault();const t=e.target,n=new FormData(t),a=n.get("editTransactionId"),o=state.transactions.find((e=>e.id===a));if(!o)return showNotification("Transaction to edit not found.","error"),void closeModal("formModal");const s=o.date,i=n.get("transactionType"),r=parseFloat(n.get("amount")),c=n.get("account"),l="expense"===i?n.get("category"):null,d=n.get("description").trim(),m=n.get("date");if(isNaN(r)||r<=0)return void showNotification("Valid amount required.","error");if(!c)return void showNotification("Account required.","error");if("expense"===i&&!l)return void showNotification("Category required for expense.","error");if(!d)return void showNotification("Description required.","error");if(!m)return void showNotification("Date required.","error");const u=o.amount,p=state.accounts.find((e=>e.id===o.account));p&&("income"===o.type?p.balance=roundToTwoDecimals(p.balance-u):p.balance=roundToTwoDecimals(p.balance+u),isNaN(p.balance)&&(p.balance=0)),o.type=i,o.amount=roundToTwoDecimals(r),o.account=c,o.category=l,o.description=d,o.date=m;const f=state.accounts.find((e=>e.id===c));f?("income"===o.type?f.balance=roundToTwoDecimals(f.balance+o.amount):f.balance=roundToTwoDecimals(f.balance-o.amount),isNaN(f.balance)&&(f.balance=0),f.balance<0&&(p?.id!==f.id||"expense"===o.type)&&showNotification(`Warning: ${f.name} now has a negative balance.`,"warning")):showNotification("New account not found. Transaction update may be incomplete.","error"),saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification("Transaction updated successfully.","success"),refreshMonthlyViewIfRelevant(m),s!==m&&refreshMonthlyViewIfRelevant(s)}function deleteTransaction(e,t){t&&t.stopPropagation();const n=state.transactions.findIndex((t=>t.id===e));if(-1===n)return;const a=state.transactions[n],o=state.accounts.find((e=>e.id===a.account));showConfirmationModal("Delete Transaction",`Are you sure you want to delete the transaction: <br><strong>"${a.description}"</strong> (${formatCurrency(a.amount)})?`,"Delete","Cancel",(()=>{o&&("income"===a.type?o.balance=roundToTwoDecimals(o.balance-a.amount):o.balance=roundToTwoDecimals(o.balance+a.amount),isNaN(o.balance)&&(o.balance=0));const e=a.date;state.transactions.splice(n,1),saveData(),renderDashboard(),populateDropdowns(),showNotification("Transaction deleted.","success"),refreshMonthlyViewIfRelevant(e)}))}function handleTransferSubmit(e){e.preventDefault();const t=e.target,n=new FormData(t),a=parseFloat(n.get("transferAmount")),o=n.get("transferFrom"),s=n.get("transferTo"),i=$("#modalTransferError");if(i?(i.textContent="",i.classList.add("hidden")):console.warn("Modal error element (#modalTransferError) not found!"),isNaN(a)||a<=0)return showNotification("Valid amount required for transfer.","error"),void(i&&(i.textContent="Please enter a valid positive amount.",i.classList.remove("hidden")));if(o===s)return showNotification("Cannot transfer to the same account.","error"),void(i&&(i.textContent="From and To accounts cannot be the same.",i.classList.remove("hidden")));const r=state.accounts.find((e=>e.id===o)),c=state.accounts.find((e=>e.id===s));if(!r||!c)return showNotification("Invalid account selected for transfer.","error"),void(i&&(i.textContent="Invalid source or destination account selected.",i.classList.remove("hidden")));const l=roundToTwoDecimals(a);if(r.balance<l)return showNotification(`Insufficient funds in ${r.name}.`,"warning"),void(i&&(i.textContent=`Insufficient funds in ${r.name}. Available: ${formatCurrency(r.balance)}`,i.classList.remove("hidden")));r.balance=roundToTwoDecimals(r.balance-l),c.balance=roundToTwoDecimals(c.balance+l),isNaN(r.balance)&&(r.balance=0),isNaN(c.balance)&&(c.balance=0),saveData(),renderDashboard(),populateDropdowns(),showNotification(`Transferred ${formatCurrency(l)} from ${r.name} to ${c.name}.`,"success"),closeModal("transferMoneyModal")}function refreshMonthlyViewIfRelevant(e){const t=$("#monthlyViewModal"),n=$("#monthTabs .tab-button.active");if("block"===t.style.display&&n){const t=parseInt(n.dataset.month),a=parseInt(n.dataset.year),o=new Date(e+"T00:00:00");if(!isNaN(o.getTime())&&o.getFullYear()===a&&o.getMonth()===t){const e=new Set;$$("#monthlyDetailsContainer .monthly-view-day-header").forEach((t=>{const n=t.closest(".monthly-view-day-group");if(n){const a=n.querySelector(".day-transactions-container"),o=t.dataset.dayKey;a&&"0px"!==a.style.maxHeight&&o&&e.add(o)}})),renderMonthlyDetails(t,a,e)}}}let monthlyPieChartInstance=null;function setupMonthlyView(){const e=$("#yearSelector"),t=(new Date).getFullYear();if(!e){console.error("#yearSelector not found in setupMonthlyView. Monthly view cannot be initialized.");const e=$("#monthlyViewBtn");return void(e&&(e.disabled=!0,e.dataset.tooltip="Monthly View unavailable (Error)"))}const n=new Set((state.transactions||[]).map((e=>{const n=new Date(e.date);return isNaN(n.getFullYear())?t:n.getFullYear()})));n.add(t),e.innerHTML="",[...n].sort(((e,t)=>t-e)).forEach((n=>{const a=document.createElement("option");a.value=n,a.textContent=n,n===t&&(a.selected=!0),e.appendChild(a)})),e.addEventListener("change",(()=>{const t=$("#monthlySearchInput"),n=$("#clearMonthlySearchBtn");t&&(t.value=""),n&&(n.style.display="none",n.disabled=!0),renderMonthTabs(parseInt(e.value)),$("#monthlyDetailsContainer").innerHTML='<p class="text-center text-gray-400">Select a month to view details.</p>',monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null)}));renderMonthTabs(e.value?parseInt(e.value):t)}function renderMonthTabs(e){const t=$("#monthTabs");if(!t)return void console.error("#monthTabs container not found.");t.innerHTML="";["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"].forEach(((n,a)=>{const o=document.createElement("button");o.className="tab-button !px-3 !py-1.5 !text-sm",o.textContent=n,o.dataset.month=a,o.dataset.year=e,o.onclick=()=>{$$("#monthTabs .tab-button").forEach((e=>e.classList.remove("active"))),o.classList.add("active");const t=$("#monthlySearchInput"),n=$("#clearMonthlySearchBtn");t&&(t.value=""),n&&(n.style.display="none",n.disabled=!0),renderMonthlyDetails(a,e,new Set,"",!1)},t.appendChild(o)}))}function renderMonthlyDetails(e,t,n=new Set,a="",o=!1){const s=$("#monthlyDetailsContainer");(o&&!a||!o&&!a)&&monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null),s.innerHTML="";const i=state.transactions.filter((n=>{const a=new Date(n.date+"T00:00:00");return!isNaN(a.getTime())&&a.getFullYear()===t&&a.getMonth()===e}));let r=0,c=0;const l={};state.categories&&Array.isArray(state.categories)&&state.categories.forEach((e=>l[e]=0));let d=0;const m=new Date(t,e-1,1);state.transactions.filter((e=>{const t=new Date(e.date+"T00:00:00");return"expense"===e.type&&!isNaN(t.getTime())&&t.getFullYear()===m.getFullYear()&&t.getMonth()===m.getMonth()})).forEach((e=>d+=e.amount)),i.forEach((e=>{if("income"===e.type)r+=e.amount;else if("expense"===e.type){c+=e.amount;const t=e.category||"Other";void 0!==l[t]?l[t]+=e.amount:(l.Other||(l.Other=0),l.Other+=e.amount)}}));const u=document.createElement("div");u.className="monthly-view-summary-grid grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6";let p="";c>d&&d>=0?p=`<i class="fas fa-arrow-up text-indicator-bad spending-indicator" title="More than last month (${formatCurrency(d)})"></i>`:c<d&&d>0&&(p=`<i class="fas fa-arrow-down text-indicator-good spending-indicator" title="Less than last month (${formatCurrency(d)})"></i>`),u.innerHTML=`\n      <div class="monthly-view-summary-card"><p class="text-sm text-gray-400 mb-1">Total Income</p><p class="text-xl font-semibold text-income">${formatCurrency(r)}</p></div>\n      <div class="monthly-view-summary-card"><p class="text-sm text-gray-400 mb-1">Total Expenses ${p}</p><p class="text-xl font-semibold text-expense">${formatCurrency(c)}</p></div>\n      <div class="monthly-view-summary-card"><p class="text-sm text-gray-400 mb-1">Net Flow</p><p class="text-xl font-semibold ${r-c>=0?"text-income":"text-expense"}">${formatCurrency(r-c)}</p></div>`,s.appendChild(u);const f=a?i.filter((e=>{const t=state.accounts.find((t=>t.id===e.account)),n=t?t.name.toLowerCase():"",o=e.description?e.description.toLowerCase():"",s=e.category?e.category.toLowerCase():"";return o.includes(a)||s.includes(a)||n.includes(a)})):i;f.sort(((e,t)=>new Date(t.date).setHours(0,0,0,0)-new Date(e.date).setHours(0,0,0,0)||t.timestamp-e.timestamp));const y=document.createElement("div");y.className="monthly-view-content-grid grid grid-cols-1 md:grid-cols-5 gap-6 mt-6";const b=document.createElement("div");if(b.className="md:col-span-3 space-y-4",b.innerHTML=`<h3 class="text-lg font-semibold mb-3">Transactions ${a?`(Matching "${a}")`:""}</h3>`,0===f.length)b.innerHTML+=`<p class="text-gray-400 text-center py-4">${a?"No transactions match your search.":"No transactions for this month."}</p>`;else{const e=f.reduce(((e,t)=>{const n=new Date(t.date).toLocaleDateString("en-CA");return e[n]||(e[n]={date:new Date(t.date+"T00:00:00"),transactions:[],dayKey:n}),e[n].transactions.push(t),e}),{}),t=Object.values(e).sort(((e,t)=>t.date-e.date)),s=document.createElement("div");s.className="max-h-[60vh] overflow-y-auto pr-2",t.forEach((e=>{if(a&&0===e.transactions.length)return;const t=document.createElement("div");t.className="monthly-view-day-group",t.style.transition="opacity 0.3s ease-out, max-height 0.3s ease-out, margin-bottom 0.3s ease-out, padding-bottom 0.3s ease-out",t.style.overflow="hidden";const i=document.createElement("div");i.className="monthly-view-day-header items-center",i.style.cursor="pointer",i.dataset.dayKey=e.dayKey;const r=document.createElement("span");r.textContent=e.date.toLocaleDateString("en-US",{weekday:"short",day:"numeric",month:"short"});const c=document.createElement("div");c.className="flex items-center";const l=e.transactions.filter((e=>"expense"===e.type)).reduce(((e,t)=>e+t.amount),0),d=document.createElement("span");d.className="text-sm text-expense mr-2",d.textContent=`Spent: ${formatCurrency(l)}`;const m=document.createElement("i");m.className="fas text-xs text-gray-400",c.appendChild(d),c.appendChild(m),i.appendChild(r),i.appendChild(c),t.appendChild(i);const u=document.createElement("div");u.className="day-transactions-container";const p=o&&a&&e.transactions.length>0||!o&&!a&&n.has(e.dayKey);p?m.classList.add("fa-chevron-up"):(u.style.maxHeight="0px",m.classList.add("fa-chevron-down")),e.transactions.sort(((e,t)=>t.timestamp-e.timestamp)).forEach((e=>{const t=document.createElement("div");t.className="monthly-view-transaction-item";const n=state.accounts.find((t=>t.id===e.account)),a=n?n.name:"Unknown Acct",o="income"===e.type,s=o?"text-income":"text-expense";let i=a;!o&&e.category?i+=` | ${e.category}`:o||e.category||(i+=" | Uncategorized"),t.innerHTML=`\n              <div class="flex-grow mr-2 overflow-hidden">\n                <p class="font-medium truncate ${s}" title="${e.description}">${e.description}</p>\n                <p class="text-xs text-gray-400 mt-0.5">${i}</p>\n              </div>\n              <span class="font-semibold whitespace-nowrap ${s} ml-2">${o?"+":"-"}${formatCurrency(e.amount)}</span>\n              <div class="edit-btn-container flex-shrink-0 ml-2">\n                <button class="text-xs accent-text hover:text-accent-hover focus:outline-none" onclick="openEditTransactionForm('${e.id}', event)" title="Edit"><i class="fas fa-edit"></i></button>\n                <button class="text-xs text-gray-500 hover:text-expense focus:outline-none" onclick="deleteTransaction('${e.id}', event)" title="Delete"><i class="fas fa-times"></i></button>\n              </div>`,u.appendChild(t)})),t.appendChild(u),p&&setTimeout((()=>{u.style.maxHeight=u.scrollHeight+"px"}),0),i.onclick=()=>{"0px"===u.style.maxHeight?(u.style.maxHeight=u.scrollHeight+"px",m.classList.remove("fa-chevron-down"),m.classList.add("fa-chevron-up"),a||n.add(e.dayKey)):(u.style.maxHeight="0px",m.classList.remove("fa-chevron-up"),m.classList.add("fa-chevron-down"),a||n.delete(e.dayKey))},s.appendChild(t)})),b.appendChild(s)}y.appendChild(b);const g=document.createElement("div");g.className="md:col-span-2 space-y-4";const h=document.createElement("div");h.className="p-4 rounded-lg",h.style.backgroundColor="var(--bg-tertiary)",h.innerHTML='<h3 class="text-lg font-semibold mb-3">Category Summary (Full Month)</h3>';const v=document.createElement("ul");v.className="monthly-view-category-list space-y-1 text-sm max-h-48 overflow-y-auto pr-2";const C=Object.entries(l).filter((([e,t])=>t>0)).sort((([,e],[,t])=>t-e));if(C.length>0?C.forEach((([e,t])=>{const n=document.createElement("li");n.innerHTML=`<span class="truncate pr-2" title="${e}">${e}</span><span class="font-medium whitespace-nowrap">${formatCurrency(t)}</span>`,v.appendChild(n)})):v.innerHTML='<li class="text-gray-400 text-sm">No expenses in any category this month.</li>',h.appendChild(v),g.appendChild(h),C.length>0&&(!monthlyPieChartInstance||o&&!a)){monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null);const e=document.createElement("div");e.className="p-4 rounded-lg h-96 md:h-[450px] flex flex-col",e.style.backgroundColor="var(--bg-tertiary)";const t=document.createElement("h3");t.className="text-lg font-semibold mb-3 text-center",t.textContent="Category Distribution (Full Month)",e.appendChild(t);const n=document.createElement("div");n.className="flex-grow relative chart-container";const a=document.createElement("canvas");a.id="monthlyDetailPieChartCanvas",n.appendChild(a),e.appendChild(n),g.appendChild(e);const o={labels:C.map((([e,t])=>e)),values:C.map((([e,t])=>t))};setTimeout((()=>renderMonthlyPieChart(o)),100)}else if(0===C.length&&monthlyPieChartInstance)monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null;else if(0===C.length&&!document.getElementById("monthlyDetailPieChartCanvas")){const e=document.createElement("div");e.className="p-4 rounded-lg h-72 md:h-80 flex items-center justify-center",e.style.backgroundColor="var(--bg-tertiary)",e.innerHTML='<p class="text-gray-400 text-sm">No expense data for chart.</p>',g.appendChild(e)}y.appendChild(g),s.appendChild(y)}function renderMonthlyPieChart(e){const t=document.getElementById("monthlyDetailPieChartCanvas");if(!t||!t.getContext)return console.error("Canvas for monthly pie chart (id: monthlyDetailPieChartCanvas) not found or invalid."),void(monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null));const n=t.getContext("2d"),a=["#e67e26","#2a9d8f","#e74c3c","#3498db","#f1c40f","#9b59b6","#34495e","#1abc9c","#7f8c8d","#2ecc71","#d35400","#27ae60","#c0392b"],o=e.labels.map(((e,t)=>a[t%a.length]));monthlyPieChartInstance?(monthlyPieChartInstance.data.labels=e.labels,monthlyPieChartInstance.data.datasets[0].data=e.values,monthlyPieChartInstance.data.datasets[0].backgroundColor=o,monthlyPieChartInstance.update()):monthlyPieChartInstance=new Chart(n,{type:"pie",data:{labels:e.labels,datasets:[{label:"Expenses by Category",data:e.values,backgroundColor:o,borderColor:"var(--bg-secondary)",borderWidth:1,hoverOffset:8,hoverBorderColor:"var(--text-primary)"}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{backgroundColor:"rgba(0,0,0,0.85)",titleColor:"#fff",bodyColor:"#fff",padding:12,cornerRadius:4,usePointStyle:!0,callbacks:{label:function(e){let t=e.label||"";if(t&&(t+=": "),null!==e.parsed){t+=formatCurrency(e.parsed);const n=e.chart.getDatasetMeta(0),a=n.total||n.data.reduce(((e,t)=>e+t.raw),0);t+=` (${a>0?(e.parsed/a*100).toFixed(1)+"%":"0.0%"})`}return t}}}}}})}function renderCreditCardSection(){const e=state.creditCard.limit||0,t=state.creditCard.transactions||[];$("#ccLimit").textContent=formatCurrency(e);const n=e-t.filter((e=>!e.paidOff)).reduce(((e,t)=>e+t.amount-(t.paidAmount||0)),0),a=$("#ccAvailable");a.textContent=formatCurrency(n),a.classList.toggle("text-danger",n<0),a.classList.toggle("accent-text",n>=0)}function openCcHistoryModal(){const e=$("#ccHistoryModal"),t=$("#ccHistoryListContainer");if(!e||!t)return;const n=state.creditCard.limit||0,a=state.creditCard.transactions||[];$("#ccHistoryLimit").textContent=formatCurrency(n);const o=a.filter((e=>!e.paidOff)).reduce(((e,t)=>e+t.amount-(t.paidAmount||0)),0),s=n-o;$("#ccHistorySpentUnpaid").textContent=formatCurrency(o);const i=$("#ccHistoryAvailable");i.textContent=formatCurrency(s),i.classList.toggle("text-expense",s<0),i.classList.toggle("accent-text",s>=0),t.innerHTML="";const r=[...a].sort(((e,t)=>new Date(t.date).setHours(0,0,0,0)-new Date(e.date).setHours(0,0,0,0)||t.timestamp-e.timestamp));0===r.length?t.innerHTML='<p class="text-gray-400 text-sm text-center py-4">No CC transactions.</p>':r.forEach((e=>{const n=document.createElement("div");n.className="flex justify-between items-center p-3 border-b border-gray-700 text-sm "+(e.paidOff?"opacity-60":"");const a=e.amount-(e.paidAmount||0),o=`\n      <div class="edit-btn-container">\n          ${!e.paidOff&&a>.005?`\n              <button class="text-xs text-income hover:opacity-80 focus:outline-none mr-2" onclick="openPayCcItemForm('${e.id}')" title="Pay Item"><i class="fas fa-dollar-sign"></i></button>\n          `:""}\n          <button class="text-xs accent-text hover:text-accent-hover focus:outline-none mr-2" onclick="openEditCcTransactionForm('${e.id}')" title="Edit"><i class="fas fa-edit"></i></button>\n          <button class="text-xs text-gray-500 hover:text-expense focus:outline-none" onclick="deleteCcTransaction('${e.id}')" title="Delete"><i class="fas fa-times"></i></button>\n      </div>\n      `;n.innerHTML=`\n        <div class="cc-history-item-details flex-grow mr-3 overflow-hidden">\n            <p class="cc-history-item-description ${e.paidOff?"text-gray-500":""}" title="${e.description}">${e.description}</p>\n            <p class="cc-history-item-date">${new Date(e.date).toLocaleDateString()} ${e.paidAmount>0&&!e.paidOff?`(Paid: ${formatCurrency(e.paidAmount)})`:""}</p>\n        </div>\n        <div class="flex items-center flex-shrink-0">\n            <span class="font-semibold mr-3 ${e.paidOff?"text-gray-500":a<=.005?"text-income":"text-expense"}">\n                ${e.paidOff?formatCurrency(e.amount):formatCurrency(a)} ${e.paidOff?"":a<=.005?" (Settled)":" Left"}\n            </span>\n            ${o}\n        </div>`,t.appendChild(n)})),e.style.display="block"}function openSetCcLimitForm(){openFormModal("Set Credit Card Limit",`<div><label for="ccLimitAmount" class="block text-sm font-medium mb-1">Credit Limit (LKR)</label><input type="number" id="ccLimitAmount" name="ccLimitAmount" step="0.01" min="0" value="${(state.creditCard.limit||0).toFixed(2)}" placeholder="Enter total limit" required></div><button type="submit" class="btn btn-primary w-full">Set Limit</button>`,handleSetCcLimitSubmit)}function handleCcTransactionSubmit(e){e.preventDefault();const t=e.target,n=new FormData(t),a=parseFloat(n.get("ccAmount")),o=n.get("ccDescription").trim(),s=n.get("ccDate");if(isNaN(a)||a<=0)return void showNotification("Valid amount required for CC transaction.","error");if(!o)return void showNotification("Description required for CC transaction.","error");if(!s)return void showNotification("Date required for CC transaction.","error");state.creditCard.transactions||(state.creditCard.transactions=[]);const i=roundToTwoDecimals(a),r=Date.now(),c={id:generateId(),amount:i,description:o,date:s,paidAmount:0,paidOff:!1,timestamp:r};state.creditCard.transactions.push(c),showNotification("CC transaction added.","success"),saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),t.reset();const l=t.querySelector("#ccDate");l&&(l.value=getCurrentDateString())}function openEditCcTransactionModal(e){const t=state.creditCard.transactions.find((t=>t.id===e));if(!t)return void showNotification("CC Transaction not found for editing.","error");"block"===$("#ccHistoryModal").style.display&&closeModal("ccHistoryModal");openFormModal("Edit CC Transaction",`\n            <input type="hidden" name="editCcTransactionId" value="${t.id}">\n            <div>\n                <label for="modalCcAmount" class="block text-sm font-medium mb-1">Amount (LKR)</label>\n                <input type="number" id="modalCcAmount" name="ccAmount" value="${t.amount.toFixed(2)}" step="0.01" min="0" placeholder="Amount spent" required>\n            </div>\n            <div>\n                <label for="modalCcDescription" class="block text-sm font-medium mb-1">Description</label>\n                <input type="text" id="modalCcDescription" name="ccDescription" value="${t.description}" placeholder="e.g., Online purchase" required>\n            </div>\n            <div>\n                <label for="modalCcDate" class="block text-sm font-medium mb-1">Date</label>\n                <input type="date" id="modalCcDate" name="ccDate" value="${t.date}" required>\n            </div>\n            <button type="submit" class="btn btn-primary w-full"><i class="fas fa-save"></i> Update CC Transaction</button>\n        `,handleEditCcTransactionModalSubmit)}function handleEditCcTransactionModalSubmit(e){e.preventDefault();const t=e.target,n=new FormData(t),a=n.get("editCcTransactionId"),o=state.creditCard.transactions.find((e=>e.id===a));if(!o)return showNotification("CC Transaction to edit not found.","error"),void closeModal("formModal");const s=parseFloat(n.get("ccAmount")),i=n.get("ccDescription").trim(),r=n.get("ccDate");if(isNaN(s)||s<=0)return void showNotification("Valid amount required for CC transaction.","error");if(!i)return void showNotification("Description required for CC transaction.","error");if(!r)return void showNotification("Date required for CC transaction.","error");const c=roundToTwoDecimals(s);o.amount=c,o.description=i,o.date=r,o.timestamp=Date.now(),o.paidAmount>c&&(o.paidAmount=c),roundToTwoDecimals(o.paidAmount)>=c-.005?(o.paidOff=!0,o.paidAmount=c):o.paidOff=!1,saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),closeModal("formModal"),showNotification("CC Transaction updated successfully.","success")}function deleteCcTransaction(e){const t=state.creditCard.transactions.findIndex((t=>t.id===e));if(-1===t)return;const n=state.creditCard.transactions[t];showConfirmationModal("Delete CC Transaction",`Are you sure you want to delete the CC transaction: <br><strong>"${n.description}"</strong> (${formatCurrency(n.amount)})?<br><br><strong class="text-warning">Warning:</strong> This will also remove any associated payment records made through the app for this specific CC item.`,"Delete","Cancel",(()=>{state.transactions=state.transactions.filter((e=>!("Credit Card Payment"===e.category&&e.description.includes(n.description.substring(0,15))))),state.creditCard.transactions.splice(t,1),saveData(),renderDashboard(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),showNotification("CC transaction and related payments deleted.","success")}))}function openAddDebtForm(){openFormModal("Add New Debt",'<div><label for="debtWho" class="block text-sm font-medium mb-1">Who do you owe?</label><input type="text" id="debtWho" name="debtWho" placeholder="e.g., John Doe" required></div><div><label for="debtWhy" class="block text-sm font-medium mb-1">Reason?</label><input type="text" id="debtWhy" name="debtWhy" placeholder="e.g., Loan" required></div><div><label for="debtAmount" class="block text-sm font-medium mb-1">Amount Owed (LKR)</label><input type="number" id="debtAmount" name="debtAmount" step="0.01" min="0.01" required></div><div><label for="debtDueDate" class="block text-sm font-medium mb-1">Due Date</label><input type="date" id="debtDueDate" name="debtDueDate" required></div><button type="submit" class="btn btn-primary w-full">Add Debt</button>',handleAddDebtSubmit);const e=new Date;e.setMonth(e.getMonth()+1);const t=$("#debtDueDate");t&&(t.value=e.toISOString().split("T")[0])}function handleAddDebtSubmit(e){e.preventDefault();const t=new FormData(e.target),n=parseFloat(t.get("debtAmount"));if(isNaN(n)||n<=0)return void showNotification("Invalid amount for debt.","error");const a=roundToTwoDecimals(n),o={id:generateId(),who:t.get("debtWho").trim(),why:t.get("debtWhy").trim(),amount:a,originalAmount:a,remainingAmount:a,dueDate:t.get("debtDueDate"),timestamp:Date.now()};o.who&&o.why&&o.dueDate?(state.debts.push(o),saveData(),renderDashboard(),closeModal("formModal"),showNotification("Debt added.","success")):showNotification("All fields required for debt.","error")}function openEditDebtForm(e){const t=state.debts.find((t=>t.id===e));t&&openFormModal("Edit Debt",` <input type="hidden" name="editDebtId" value="${t.id}"> <div><label class="block text-sm font-medium mb-1">Who</label><input type="text" name="debtWho" value="${t.who}" required></div> <div><label class="block text-sm font-medium mb-1">Why</label><input type="text" name="debtWhy" value="${t.why}" required></div> <div><label class="block text-sm font-medium mb-1">Original Amount</label><input type="number" name="debtOriginalAmount" value="${(t.originalAmount||t.amount).toFixed(2)}" step="0.01" min="0.01" required></div> <div><label class="block text-sm font-medium mb-1">Remaining Amount</label><input type="number" name="debtRemainingAmount" value="${t.remainingAmount.toFixed(2)}" step="0.01" min="0" required></div> <div><label class="block text-sm font-medium mb-1">Due Date</label><input type="date" name="debtDueDate" value="${t.dueDate}" required></div> <button type="submit" class="btn btn-primary w-full">Update Debt</button> `,handleEditDebtSubmit)}function handleEditDebtSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("editDebtId"),a=state.debts.find((e=>e.id===n));if(!a)return void showNotification("Debt not found for editing.","error");const o=parseFloat(t.get("debtOriginalAmount")),s=parseFloat(t.get("debtRemainingAmount"));isNaN(o)||o<=0||isNaN(s)||s<0||roundToTwoDecimals(s)>roundToTwoDecimals(o)?showNotification("Invalid amounts for debt. Remaining cannot exceed original, and amounts must be valid numbers.","error"):(a.who=t.get("debtWho").trim(),a.why=t.get("debtWhy").trim(),a.originalAmount=roundToTwoDecimals(o),a.remainingAmount=roundToTwoDecimals(s),a.dueDate=t.get("debtDueDate"),a.timestamp=Date.now(),a.amount=a.originalAmount,saveData(),renderDashboard(),closeModal("formModal"),showNotification("Debt updated.","success"))}function openPayDebtForm(e){const t=state.debts.find((t=>t.id===e));if(!t)return;const n="Debt Repayment";let a="";const o=state.categories.filter((e=>"income"!==e.toLowerCase()&&"credit card payment"!==e.toLowerCase()&&e.toLowerCase()!==n.toLowerCase())).sort(((e,t)=>e.localeCompare(t)));state.categories.some((e=>e.toLowerCase()===n.toLowerCase()))?a+=`<option value="${n}" selected>${n}</option>`:a+=`<option value="${n}" selected>${n} (Suggested)</option>`,o.forEach((e=>{a+=`<option value="${e}">${e}</option>`}));const s=`\n      <p class="mb-2">Owed: <span class="font-semibold">${formatCurrency(t.remainingAmount)}</span> to ${t.who} for ${t.why}</p>\n      <div>\n          <label for="payDebtAmount" class="block text-sm font-medium mb-1">Payment Amount (LKR)</label>\n          <input type="number" id="payDebtAmount" name="payDebtAmount" step="0.01" min="0.01" max="${t.remainingAmount.toFixed(2)}" value="${t.remainingAmount.toFixed(2)}" required>\n      </div>\n      <div>\n          <label for="modalPayDebtAccount" class="block text-sm font-medium mb-1">Pay From Account</label>\n          <select id="modalPayDebtAccount" name="payDebtAccount" required></select>\n      </div>\n      <div class="flex items-center mt-3 mb-1">\n          <input type="checkbox" id="logDebtPaymentAsExpense" name="logDebtPaymentAsExpense" class="h-4 w-4 text-accent-primary border-gray-500 rounded focus:ring-accent-primary mr-2" checked>\n          <label for="logDebtPaymentAsExpense" class="text-sm font-medium text-gray-300">Log this payment as an expense?</label>\n      </div>\n      <div id="debtPaymentCategoryGroup">\n          <label for="modalPayDebtCategory" class="block text-sm font-medium mb-1">Category for this Payment</label>\n          <select id="modalPayDebtCategory" name="payDebtCategory" required>${a}</select>\n      </div>\n      <input type="hidden" name="debtId" value="${e}">\n      <button type="submit" class="btn btn-primary w-full mt-3">Make Payment</button>\n  `;openFormModal(`Pay Debt: ${t.who}`,s,handlePayDebtSubmit),populateDropdowns();const i=document.getElementById("logDebtPaymentAsExpense"),r=document.getElementById("debtPaymentCategoryGroup"),c=document.getElementById("modalPayDebtCategory");i&&r&&c&&(r.style.display=i.checked?"block":"none",c.required=i.checked,i.onchange=()=>{i.checked?(r.style.display="block",c.required=!0):(r.style.display="none",c.required=!1)})}function handlePayDebtSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("debtId"),a=parseFloat(t.get("payDebtAmount")),o=t.get("payDebtAccount"),s="on"===t.get("logDebtPaymentAsExpense"),i=s?t.get("payDebtCategory"):null,r=getCurrentDateString(),c=state.debts.find((e=>e.id===n)),l=state.accounts.find((e=>e.id===o));if(!c||!l)return void showNotification("Debt or account not found.","error");const d=roundToTwoDecimals(a);if(isNaN(d)||d<=0||d>roundToTwoDecimals(c.remainingAmount+.005))return void showNotification("Invalid payment amount for debt.","error");if(s&&!i)return void showNotification("Please select a category for this payment if logging as an expense.","error");if(l.balance<d)return void showNotification(`Insufficient funds in ${l.name}.`,"warning");l.balance=roundToTwoDecimals(l.balance-d),isNaN(l.balance)&&(l.balance=0),c.remainingAmount=roundToTwoDecimals(c.remainingAmount-d);let m=`Payment of ${formatCurrency(d)} made for ${c.who}. Remaining: ${formatCurrency(c.remainingAmount)}.`;if(s){const e={id:generateId(),type:"expense",amount:d,account:o,category:i,description:`Debt Payment: ${c.who} - ${c.why}`,date:r,timestamp:Date.now()};state.transactions.push(e),m+=" Expense logged.",refreshMonthlyViewIfRelevant(r)}else m+=" Not logged as expense.";c.remainingAmount<=.005&&(c.remainingAmount=0,state.debts=state.debts.filter((e=>e.id!==n)),m=`Debt for ${c.who} fully paid.${s?" Expense logged.":" Not logged as expense."}`),saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification(m,"success")}function deleteDebt(e){const t=state.debts.find((t=>t.id===e));t&&showConfirmationModal("Delete Debt",`Are you sure you want to delete the debt for <strong>"${t.who}"</strong> regarding "${t.why}" (${formatCurrency(t.remainingAmount)})?<br><br>This removes the record only.`,"Delete","Cancel",(()=>{state.debts=state.debts.filter((t=>t.id!==e)),saveData(),renderDashboard(),"block"===$("#debtsViewModal").style.display&&renderDebtList(),showNotification("Debt entry deleted.","success")}))}function openAddReceivableForm(){openFormModal("Add New Receivable",'\n            <div><label for="recWho" class="block text-sm font-medium mb-1">Who owes you?</label><input type="text" id="recWho" name="recWho" placeholder="e.g., Jane Doe" required></div>\n            <div><label for="recWhy" class="block text-sm font-medium mb-1">Reason?</label><input type="text" id="recWhy" name="recWhy" placeholder="e.g., Friendly loan" required></div>\n            <div><label for="recAmount" class="block text-sm font-medium mb-1">Amount Owed (LKR)</label><input type="number" id="recAmount" name="recAmount" step="0.01" min="0.01" required></div>\n            <div><label for="recDateGiven" class="block text-sm font-medium mb-1">Date Given</label><input type="date" id="recDateGiven" name="recDateGiven" required></div>\n            <div>\n                <label for="recType" class="block text-sm font-medium mb-1">Type</label>\n                <select id="recType" name="recType" required onchange="toggleReceivableSourceAccount(this.value, \'recSourceAccountGroupAdd\', \'recSourceAccountAdd\')">\n                    <option value="cash">Cash/Bank Loan</option>\n                    <option value="cc">Credit Card Loan</option>\n                </select>\n            </div>\n            <div id="recSourceAccountGroupAdd" style="display: block;"> <label for="recSourceAccountAdd" class="block text-sm font-medium mb-1">Source Account (if Cash/Bank)</label>\n                <select id="recSourceAccountAdd" name="receivableSourceAccount" required></select> </div>\n                <p id="receivableCcDisclaimer" class="disclaimer-text" style="display: none;">\n                <i class="fas fa-info-circle mr-1"></i>\n                <strong>Important:</strong> Selecting "Credit Card Loan" means you provided funds from your credit card. This entry tracks the money owed <em>to you</em>. It does not automatically create an expense on your credit card. If you used your credit card for this, please add a separate "CC Expense" manually to reflect the charge on your card.\n            </p>\n            <button type="submit" class="btn btn-primary w-full"><i class="fas fa-plus"></i> Add Receivable</button>\n        ',handleAddReceivableSubmit);const e=$("#recDateGiven");e&&(e.value=(new Date).toISOString().split("T")[0]);const t=$("#recSourceAccountAdd");t&&(t.innerHTML="",state.accounts.forEach((e=>{const n=document.createElement("option");n.value=e.id,n.textContent=`${e.name} (${formatCurrency(e.balance)})`,t.appendChild(n)})));const n=$("#recType");n&&toggleReceivableSourceAccount(n.value,"recSourceAccountGroupAdd","recSourceAccountAdd")}function toggleReceivableSourceAccount(e,t,n){const a=document.getElementById(t),o=document.getElementById(n),s=document.getElementById("receivableCcDisclaimer");a&&o?"cash"===e?(a.style.display="block",o.required=!0,s&&(s.style.display="none")):(a.style.display="none",o.required=!1,s&&(s.style.display="block")):(a||console.warn(`toggleReceivableSourceAccount: Group element with ID '${t}' not found.`),o||console.warn(`toggleReceivableSourceAccount: Select element with ID '${n}' not found.`)),s||"cc"!==e||console.warn("toggleReceivableSourceAccount: Disclaimer element with ID 'receivableCcDisclaimer' not found, but was expected for 'cc' type.")}function handleAddReceivableSubmit(e){e.preventDefault();const t=new FormData(e.target),n=parseFloat(t.get("recAmount")),a=t.get("recType"),o="cash"===a?t.get("receivableSourceAccount"):null;if(isNaN(n)||n<=0)return void showNotification("Invalid amount for receivable.","error");const s=roundToTwoDecimals(n),i={id:generateId(),who:t.get("recWho").trim(),why:t.get("recWhy").trim(),amount:s,originalAmount:s,remainingAmount:s,dateGiven:t.get("recDateGiven"),type:a,sourceAccount:o,ccTransactionId:null,timestamp:Date.now()};if(i.who&&i.why&&i.dateGiven){if("cash"===a){if(!o)return void showNotification("Source account required for cash loan.","error");let e=state.accounts.find((e=>e.id===o));if(!e)return void showNotification("Source account not found.","error");if(e.balance<s)return void showNotification(`Insufficient funds in ${e.name}.`,"warning");e.balance=roundToTwoDecimals(e.balance-s),isNaN(e.balance)&&(e.balance=0)}else"cc"===a&&console.log(`Receivable of type 'cc' added for ${i.who}. User to manually add CC expense if needed.`);state.receivables.push(i),saveData(),renderDashboard(),populateDropdowns(),"cc"===a&&renderCreditCardSection(),closeModal("formModal"),showNotification(`Receivable for ${i.who} added.${"cash"===a&&o?` ${formatCurrency(s)} deducted from account.`:""}`,"success")}else showNotification("All fields required for receivable.","error")}function openEditReceivableForm(e){const t=state.receivables.find((t=>t.id===e));if(!t)return;openFormModal("Edit Receivable",` <input type="hidden" name="editReceivableId" value="${t.id}"> <div><label class="block text-sm font-medium mb-1">Who</label><input type="text" name="recWho" value="${t.who}" required></div> <div><label class="block text-sm font-medium mb-1">Why</label><input type="text" name="recWhy" value="${t.why}" required></div> <div><label class="block text-sm font-medium mb-1">Original Amount</label><input type="number" name="recOriginalAmount" value="${(t.originalAmount||t.amount).toFixed(2)}" step="0.01" min="0.01" required></div> <div><label class="block text-sm font-medium mb-1">Remaining</label><input type="number" name="recRemainingAmount" value="${t.remainingAmount.toFixed(2)}" step="0.01" min="0" required></div> <div><label class="block text-sm font-medium mb-1">Date Given</label><input type="date" name="recDateGiven" value="${t.dateGiven}" required></div> <div><label class="block text-sm font-medium mb-1">Type</label><select id="recTypeEdit" name="recType" onchange="toggleReceivableSourceAccount(this.value, 'recSourceAccountGroupEdit', 'recSourceAccountEdit')"><option value="cash" ${"cash"===t.type?"selected":""}>Cash/Bank</option><option value="cc" ${"cc"===t.type?"selected":""}>Credit Card</option></select></div> <div id="recSourceAccountGroupEdit" style="display:${"cash"===t.type?"block":"none"}"><label class="block text-sm font-medium mb-1">Source Account</label><select id="recSourceAccountEdit" name="receivableSourceAccount">${state.accounts.map((e=>`<option value="${e.id}" ${t.sourceAccount===e.id?"selected":""}>${e.name} (${formatCurrency(e.balance)})</option>`)).join("")}</select></div> <button type="submit" class="btn btn-primary w-full">Update Receivable</button> `,handleEditReceivableSubmit);const n=$("#recTypeEdit");n&&toggleReceivableSourceAccount(n.value,"recSourceAccountGroupEdit","recSourceAccountEdit")}function handleEditReceivableSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("editReceivableId"),a=state.receivables.find((e=>e.id===n));if(!a)return void showNotification("Receivable not found for editing.","error");const o=a.sourceAccount,s=a.originalAmount,i=a.type,r=(a.ccTransactionId,parseFloat(t.get("recOriginalAmount"))),c=parseFloat(t.get("recRemainingAmount")),l=t.get("recType"),d="cash"===l?t.get("receivableSourceAccount"):null;if(isNaN(r)||r<=0||isNaN(c)||c<0||roundToTwoDecimals(c)>roundToTwoDecimals(r))return void showNotification("Invalid amounts for receivable. Remaining cannot exceed original, and amounts must be valid numbers.","error");if("cash"===l&&!d)return void showNotification("Source account required for cash loan type.","error");const m=roundToTwoDecimals(r),u=roundToTwoDecimals(c);if("cash"===i&&o){const e=state.accounts.find((e=>e.id===o));e&&(e.balance=roundToTwoDecimals(e.balance+s),isNaN(e.balance)&&(e.balance=0))}if(a.who=t.get("recWho").trim(),a.why=t.get("recWhy").trim(),a.originalAmount=m,a.amount=m,a.remainingAmount=u,a.dateGiven=t.get("recDateGiven"),a.type=l,a.sourceAccount=d,a.timestamp=Date.now(),a.ccTransactionId=null,"cash"===a.type&&a.sourceAccount){const e=state.accounts.find((e=>e.id===a.sourceAccount));if(e){if(e.balance<a.originalAmount){if(showNotification(`Insufficient funds in new source account ${e.name}. Reverting changes.`,"warning"),"cash"===i&&o){const e=state.accounts.find((e=>e.id===o));e&&(e.balance=roundToTwoDecimals(e.balance-s))}return}e.balance=roundToTwoDecimals(e.balance-a.originalAmount),isNaN(e.balance)&&(e.balance=0)}}else a.type;saveData(),renderDashboard(),populateDropdowns(),"cc"!==a.type&&"cc"!==i||renderCreditCardSection(),closeModal("formModal"),showNotification("Receivable updated.","success")}function openReceivePaymentForm(e){const t=state.receivables.find((t=>t.id===e));if(!t)return void showNotification("Receivable not found.","error");let n="";"cc"===t.type&&(n='\n      <p id="receivablePaymentCcDisclaimer" class="disclaimer-text mt-3 mb-2">\n        <i class="fas fa-info-circle mr-1"></i>\n        <strong>Credit Card Receivable:</strong> The amount you receive will be added to the selected account. Remember, this does not pay your credit card bill. You\'ll need to record a separate \'Credit Card Payment\' transaction later.\n      </p>\n    ');const a=`\n    <p id="overpaymentInfo" class="text-xs text-gray-400 mt-1 mb-2" style="display: none;">\n      Any amount received over ${formatCurrency(t.remainingAmount)} will be logged as additional income.\n    </p>\n  `,o=`\n    <p class="mb-2">Owed: <span class="font-semibold">${formatCurrency(t.remainingAmount)}</span> by ${t.who} for ${t.why}</p>\n    <div>\n      <label for="recPaymentAmount" class="block text-sm font-medium mb-1">Amount Received (LKR)</label>\n      <input type="number" id="recPaymentAmount" name="recPaymentAmount" step="0.01" min="0.01" \n             value="${t.remainingAmount.toFixed(2)}" required> \n             </div>\n    ${a}\n    <div>\n      <label for="recPaymentAccount" class="block text-sm font-medium mb-1">Receive Into Account</label>\n      <select id="recPaymentAccount" name="recPaymentAccount" required></select>\n    </div>\n    ${n} \n    <input type="hidden" name="recId" value="${e}">\n    <button type="submit" class="btn btn-primary w-full mt-3">Record Payment</button>\n  `;openFormModal(`Receive Payment from: ${t.who}`,o,handleReceivePaymentSubmit),populateDropdowns();const s=document.getElementById("recPaymentAmount"),i=document.getElementById("overpaymentInfo");if(s&&i){const e=()=>{const e=parseFloat(s.value);!isNaN(e)&&t.remainingAmount>0&&e>t.remainingAmount?i.style.display="block":i.style.display="none"};s.addEventListener("input",e),e()}}function handleReceivePaymentSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("recId"),a=parseFloat(t.get("recPaymentAmount")),o=t.get("recPaymentAccount"),s=(new Date).toISOString().split("T")[0],i=state.receivables.find((e=>e.id===n)),r=state.accounts.find((e=>e.id===o));if(!i||!r)return void showNotification("Receivable or account not found.","error");if(isNaN(a)||a<=0)return void showNotification("Invalid payment amount. Must be greater than zero.","error");const c=roundToTwoDecimals(a);r.balance=roundToTwoDecimals(r.balance+c),isNaN(r.balance)&&(r.balance=0);let l="",d=!1;const m=i.remainingAmount;if(c>m){const e=roundToTwoDecimals(c-m);i.remainingAmount=0;const t={id:generateId(),type:"income",amount:e,account:o,category:null,description:`${i.who} Paid Back Extra`,date:s,timestamp:Date.now()};state.transactions.push(t),d=!0,console.log(`Logged extra income of ${formatCurrency(e)} from ${i.who}`)}else i.remainingAmount=roundToTwoDecimals(m-c);i.remainingAmount<=.005?(i.remainingAmount=0,state.receivables=state.receivables.filter((e=>e.id!==n)),l=`Receivable from ${i.who} fully paid.`,d&&(l+=` Extra ${formatCurrency(roundToTwoDecimals(c-m))} logged as income.`)):l=`Payment of ${formatCurrency(c)} received from ${i.who}. Remaining: ${formatCurrency(i.remainingAmount)}.`,saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification(l,"success"),d&&refreshMonthlyViewIfRelevant(s)}function deleteReceivable(e){const t=state.receivables.find((t=>t.id===e));if(!t)return void showNotification("Receivable not found.","error");let n=`Are you sure you want to delete the receivable from <strong>"${t.who}"</strong> for "${t.why}" (${formatCurrency(t.remainingAmount)})?<br><br>This action only removes the record of them owing you money.`;if("cash"===t.type&&t.sourceAccount){n+=`<br><br><strong class="text-warning">Important:</strong> This will NOT automatically refund the amount to your source account ('${state.accounts.find((e=>e.id===t.sourceAccount))?.name||"Unknown Account"}'). That adjustment needs to be handled manually if required.`}else"cc"===t.type&&(n+='<br><br><strong class="text-warning">Note:</strong> This does NOT affect any separate credit card expense you might have recorded on your own card for giving out this loan.');showConfirmationModal("Delete Receivable",n,"Delete","Cancel",(()=>{state.receivables=state.receivables.filter((t=>t.id!==e)),saveData(),renderDashboard(),"block"===$("#receivablesViewModal").style.display&&renderReceivableList(),showNotification("Receivable entry deleted successfully.","success")}))}function openAddInstallmentForm(){openFormModal("Add New Installment Plan",'\n    <div>\n      <label for="instDescription" class="block text-sm font-medium mb-1">Description</label>\n      <input type="text" id="instDescription" name="instDescription" placeholder="e.g., New Phone" required>\n    </div>\n    <div>\n      <label for="instFullAmount" class="block text-sm font-medium mb-1">Full Original Amount (LKR)</label>\n      <input type="number" id="instFullAmount" name="instFullAmount" step="0.01" min="0.01" placeholder="Total original cost" required>\n    </div>\n    <div>\n      <label for="instTotalMonths" class="block text-sm font-medium mb-1">Total Months for Plan</label>\n      <input type="number" id="instTotalMonths" name="instTotalMonths" step="1" min="1" placeholder="e.g., 12" required>\n    </div>\n    <div>\n      <label for="instMonthsLeft" class="block text-sm font-medium mb-1">Months Left (if not full term)</label>\n      <input type="number" id="instMonthsLeft" name="instMonthsLeft" step="1" min="0" placeholder="Defaults to Total Months">\n    </div>\n    <div>\n      <label for="instStartDate" class="block text-sm font-medium mb-1">Start Date</label>\n      <input type="date" id="instStartDate" name="instStartDate" required>\n    </div>\n    \n    <p class="disclaimer-text mt-3 mb-2">\n      <i class="fas fa-info-circle mr-1"></i>\n      <strong>Important:</strong> This tracks installment status (months left). Actual payments (especially for CC installments) must be recorded manually via \'Add Transaction\' or \'Add CC Expense\' to update account balances.\n    </p>\n  \n    <button type="submit" class="btn btn-primary w-full mt-3">Add Plan</button>\n  ',handleAddInstallmentSubmit);const e=$("#instStartDate");e&&(e.value=(new Date).toISOString().split("T")[0]);const t=$("#instTotalMonths"),n=$("#instMonthsLeft");if(t&&n){const e=()=>{const e=parseInt(t.value);!isNaN(e)&&e>0?(n.max=e,parseInt(n.value)>e&&(n.value=e)):n.removeAttribute("max")};t.addEventListener("input",e),e()}}function handleAddInstallmentSubmit(e){e.preventDefault();const t=new FormData(e.target),n=parseFloat(t.get("instFullAmount")),a=parseInt(t.get("instTotalMonths"));let o=parseInt(t.get("instMonthsLeft"));if(isNaN(n)||n<=0||isNaN(a)||a<=0)return void showNotification("Invalid full amount or total months for installment.","error");(isNaN(o)||o>a||o<0)&&(o=a);const s=roundToTwoDecimals(n),i=roundToTwoDecimals(s/a),r={id:generateId(),description:t.get("instDescription").trim(),monthlyAmount:i,totalMonths:a,monthsLeft:o,startDate:t.get("instStartDate"),originalFullAmount:s,timestamp:Date.now()};r.description&&r.startDate?(state.installments.push(r),saveData(),renderDashboard(),closeModal("formModal"),showNotification("Installment plan added.","success")):showNotification("Description and Start Date are required for installment.","error")}function openEditInstallmentForm(e){const t=state.installments.find((t=>t.id===e));if(!t)return void showNotification("Installment plan not found for editing.","error");const n=t.originalFullAmount||t.monthlyAmount*t.totalMonths;openFormModal("Edit Installment Plan",`\n    <input type="hidden" name="editInstallmentId" value="${t.id}">\n    <div>\n      <label for="instDescription" class="block text-sm font-medium mb-1">Description</label>\n      <input type="text" id="instDescription" name="instDescription" value="${t.description}" required>\n    </div>\n    <div>\n      <label for="instFullAmount" class="block text-sm font-medium mb-1">Full Original Amount (LKR)</label>\n      <input type="number" id="instFullAmount" name="instFullAmount" value="${n.toFixed(2)}" step="0.01" min="0.01" required>\n    </div>\n    <div>\n      <label for="instTotalMonths" class="block text-sm font-medium mb-1">Total Months for Plan</label>\n      <input type="number" id="instTotalMonths" name="instTotalMonths" value="${t.totalMonths}" step="1" min="1" required>\n    </div>\n    <div>\n      <label for="instMonthsLeft" class="block text-sm font-medium mb-1">Months Left</label>\n      <input type="number" id="instMonthsLeft" name="instMonthsLeft" value="${t.monthsLeft}" step="1" min="0" max="${t.totalMonths}" required>\n    </div>\n    <div>\n      <label for="instStartDate" class="block text-sm font-medium mb-1">Start Date</label>\n      <input type="date" id="instStartDate" name="instStartDate" value="${t.startDate}" required>\n    </div>\n    \n    <p class="disclaimer-text mt-3 mb-2">\n      <i class="fas fa-info-circle mr-1"></i>\n      <strong>Important:</strong> This tracks installment status (months left). Actual payments (especially for CC installments) must be recorded manually via 'Add Transaction' or 'Add CC Expense' to update account balances.\n    </p>\n   \n    <button type="submit" class="btn btn-primary w-full mt-3">Update Plan</button>\n  `,handleEditInstallmentSubmit);const a=document.getElementById("instTotalMonths"),o=document.getElementById("instMonthsLeft");if(a&&o){const e=()=>{const e=parseInt(a.value);!isNaN(e)&&e>0?(o.max=e,parseInt(o.value)>e&&(o.value=e)):o.removeAttribute("max")};a.addEventListener("input",e),e()}}function handleEditInstallmentSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("editInstallmentId"),a=state.installments.find((e=>e.id===n));if(!a)return void showNotification("Installment plan not found for editing.","error");const o=parseFloat(t.get("instFullAmount")),s=parseInt(t.get("instTotalMonths")),i=parseInt(t.get("instMonthsLeft"));if(isNaN(o)||o<=0||isNaN(s)||s<=0)return void showNotification("Invalid full amount or total months for installment.","error");if(isNaN(i)||i<0||i>s)return void showNotification("Invalid months left for installment.","error");const r=roundToTwoDecimals(o),c=roundToTwoDecimals(r/s);a.description=t.get("instDescription").trim(),a.totalMonths=s,a.monthsLeft=i,a.startDate=t.get("instStartDate"),a.monthlyAmount=c,a.originalFullAmount=r,a.timestamp=Date.now(),saveData(),renderDashboard(),closeModal("formModal"),showNotification("Installment plan updated.","success")}function payInstallmentMonth(e){const t=state.installments.find((t=>t.id===e));if(!t||t.monthsLeft<=0)return void showNotification("This installment plan is already fully paid or not found.","info");const n=`\n    <p class="mb-4 text-center text-gray-300">\n      Mark one month as paid for "<strong>${t.description}</strong>"?\n    </p>\n    <p class="mb-4 text-center text-sm text-gray-400">\n      Amount: ${formatCurrency(t.monthlyAmount)}<br>\n      Months remaining after this: ${t.monthsLeft-1}\n    </p>\n    <p class="disclaimer-text mt-3 mb-4">\n      <i class="fas fa-exclamation-triangle mr-1"></i>\n      <strong>Note:</strong> This action only updates the installment status. No financial transaction will be recorded, and no account balances will be affected by this step. Remember to record the actual payment manually.\n    </p>\n    <div class="flex justify-end gap-3 mt-4">\n      <button type="button" id="cancelInstallmentConfirmBtn" class="btn btn-secondary">Cancel</button>\n      <button type="button" id="confirmInstallmentPayBtn" class="btn btn-primary">Confirm & Update Status</button>\n    </div>\n  `;openFormModal(`Confirm Installment Update: ${t.description}`,n,null);const a=document.getElementById("confirmInstallmentPayBtn"),o=document.getElementById("cancelInstallmentConfirmBtn");a&&(a.onclick=()=>{handleConfirmInstallmentPayment(e),closeModal("formModal")}),o&&(o.onclick=()=>{closeModal("formModal")})}function handlePayInstallmentSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("installmentId"),a=t.get("instPayAccount"),o=t.get("instPayCategory"),s=state.installments.find((e=>e.id===n)),i=state.accounts.find((e=>e.id===a));if(!s||!i)return void showNotification("Installment or account not found.","error");if(s.monthsLeft<=0)return showNotification("Installment plan already fully paid.","info"),void closeModal("formModal");if(i.balance<s.monthlyAmount)return void showNotification(`Insufficient funds in ${i.name}.`,"warning");if(!o)return void showNotification("Please select a category for this payment.","error");i.balance-=s.monthlyAmount,isNaN(i.balance)&&(i.balance=0),s.monthsLeft-=1;const r=(new Date).toISOString().split("T")[0],c={id:generateId(),type:"expense",amount:s.monthlyAmount,account:a,category:o,description:`Installment: ${s.description} (Month ${s.totalMonths-s.monthsLeft}/${s.totalMonths})`,date:r,timestamp:Date.now()};let l;state.transactions.push(c),s.monthsLeft<=0?(state.installments=state.installments.filter((e=>e.id!==n)),l=`Installment for "${s.description}" fully paid and removed. Expense logged.`):l=`Installment month paid for "${s.description}". ${s.monthsLeft} months remaining. Expense logged.`,saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification(l,"success"),refreshMonthlyViewIfRelevant(r)}function handleConfirmInstallmentPayment(e){const t=state.installments.find((t=>t.id===e));if(!t)return void showNotification("Installment plan not found.","error");if(t.monthsLeft<=0)return void showNotification("This installment plan is already marked as fully paid.","info");t.monthsLeft-=1;let n="";t.monthsLeft<=0?(state.installments=state.installments.filter((t=>t.id!==e)),n=`Installment plan "${t.description}" marked as fully paid and completed.`):n=`Installment status updated for "${t.description}". ${t.monthsLeft} months remaining.`,saveData(),renderDashboard(),showNotification(n,"success")}function deleteInstallment(e){const t=state.installments.find((t=>t.id===e));t&&showConfirmationModal("Delete Installment Plan",`Are you sure you want to delete the installment plan: <br><strong>"${t.description}"</strong>?<br><br>This removes the record only.`,"Delete","Cancel",(()=>{state.installments=state.installments.filter((t=>t.id!==e)),saveData(),renderDashboard(),showNotification("Installment plan deleted.","success")}))}function openPayCcItemForm(e){const t=state.creditCard.transactions.find((t=>t.id===e));if(!t)return;const n=t.amount-(t.paidAmount||0);if(n<=.005)return void showNotification("This item is already fully paid/settled.","info");const a="Credit Card Payment";let o="";const s=state.categories.filter((e=>"income"!==e.toLowerCase()&&e.toLowerCase()!==a.toLowerCase())).sort(((e,t)=>e.localeCompare(t)));state.categories.some((e=>e.toLowerCase()===a.toLowerCase()))?o+=`<option value="${a}" selected>${a}</option>`:o+=`<option value="${a}" selected>${a} (Suggested)</option>`,s.forEach((e=>{o+=`<option value="${e}">${e}</option>`}));const i=`\n      <input type="hidden" name="ccItemId" value="${t.id}">\n      <p class="mb-2">Item Amount: ${formatCurrency(t.amount)}</p>\n      <p class="mb-2">Paid So Far: ${formatCurrency(t.paidAmount||0)}</p>\n      <p class="mb-2">Remaining on Item: <strong class="text-danger">${formatCurrency(n)}</strong></p>\n      <div>\n          <label for="ccItemPayAmount" class="block text-sm font-medium mb-1">Payment Amount</label>\n          <input type="number" id="ccItemPayAmount" name="ccItemPayAmount" step="0.01" min="0.01" max="${n.toFixed(2)}" value="${n.toFixed(2)}" required>\n      </div>\n      <div>\n          <label for="modalCcPayFromAccount" class="block text-sm font-medium mb-1">Pay From Account</label>\n          <select id="modalCcPayFromAccount" name="ccPayFromAccount" required></select>\n      </div>\n      <div class="flex items-center mt-3 mb-1">\n          <input type="checkbox" id="logCcPaymentAsExpense" name="logCcPaymentAsExpense" class="h-4 w-4 text-accent-primary border-gray-500 rounded focus:ring-accent-primary mr-2" checked>\n          <label for="logCcPaymentAsExpense" class="text-sm font-medium text-gray-300">Log this payment as an expense?</label>\n      </div>\n      <div id="ccPaymentCategoryGroup">\n          <label for="modalCcPayCategory" class="block text-sm font-medium mb-1">Category for this Payment</label>\n          <select id="modalCcPayCategory" name="ccPayCategory" required>${o}</select>\n      </div>\n      <button type="submit" class="btn btn-primary w-full mt-3">Make Payment</button>\n  `;openFormModal(`Pay CC Item: ${t.description.substring(0,30)}...`,i,handlePayCcItemSubmit),populateDropdowns();const r=document.getElementById("logCcPaymentAsExpense"),c=document.getElementById("ccPaymentCategoryGroup"),l=document.getElementById("modalCcPayCategory");r&&c&&l&&(c.style.display=r.checked?"block":"none",l.required=r.checked,r.onchange=()=>{r.checked?(c.style.display="block",l.required=!0):(c.style.display="none",l.required=!1)})}function handlePayCcItemSubmit(e){e.preventDefault();const t=new FormData(e.target),n=t.get("ccItemId"),a=parseFloat(t.get("ccItemPayAmount")),o=t.get("ccPayFromAccount"),s="on"===t.get("logCcPaymentAsExpense"),i=s?t.get("ccPayCategory"):null,r=state.creditCard.transactions.find((e=>e.id===n)),c=state.accounts.find((e=>e.id===o));if(!r||!c)return void showNotification("CC item or account not found.","error");const l=roundToTwoDecimals(a),d=roundToTwoDecimals(r.amount-(r.paidAmount||0));if(isNaN(l)||l<=0||l>roundToTwoDecimals(d+.005))return void showNotification("Invalid payment amount for CC item.","error");if(s&&!i)return void showNotification("Please select a category for this payment if logging as an expense.","error");if(c.balance<l)return void showNotification(`Insufficient funds in ${c.name}.`,"warning");c.balance=roundToTwoDecimals(c.balance-l),isNaN(c.balance)&&(c.balance=0),r.paidAmount=roundToTwoDecimals((r.paidAmount||0)+l),r.paidAmount>=roundToTwoDecimals(r.amount-.005)&&(r.paidOff=!0,r.paidAmount=r.amount);let m=`Payment of ${formatCurrency(l)} for CC item "${r.description.substring(0,20)}..." recorded.`;const u=getCurrentDateString();if(s){const e={id:generateId(),type:"expense",amount:l,account:o,category:i,description:`Credit Card Payment: ${r.description}`,date:u,timestamp:Date.now()};state.transactions.push(e),m+=" Expense logged.",refreshMonthlyViewIfRelevant(u)}else m+=" Not logged as expense.";r.paidOff&&(m=`CC item "${r.description.substring(0,20)}..." fully paid.${s?" Expense logged.":" Not logged as expense."}`),saveData(),renderDashboard(),renderCreditCardSection(),populateDropdowns(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),closeModal("formModal"),showNotification(m,"success")}function openSettingsModal(){renderSettingsForm(),setupSettingsTabs();const e=$("#storageSizeInfo");e&&(e.textContent=`Approx. Storage Used: ${getFormattedLocalStorageSize(STORAGE_KEY)}`),$("#settingsModal").style.display="block",cancelDeleteAllData(),displayAppVersion()}function renderSettingsForm(){const e=$("#accountManagementList");e?(e.innerHTML="",state.accounts.forEach((t=>{const n=document.createElement("div");n.className="grid grid-cols-1 sm:grid-cols-[minmax(0,2fr),minmax(0,2fr)] gap-x-3 gap-y-2 items-center py-1";const a=document.createElement("input");a.type="text",a.name=`accountName_${t.id}`,a.value=t.name,a.dataset.accountId=t.id,a.className="!py-1 !px-2 text-sm rounded placeholder-gray-400",a.style.backgroundColor="var(--bg-secondary)",a.style.borderColor="var(--border-color)",a.style.color="var(--text-primary)","cash"===t.id&&(a.readOnly=!0,a.classList.add("text-gray-400","cursor-not-allowed"));const o=document.createElement("input");o.type="number",o.name=`accountBalance_${t.id}`,o.value=t.balance.toFixed(2),o.step="0.01",o.dataset.accountId=t.id,o.className="!py-1 !px-2 text-sm rounded placeholder-gray-400",o.style.backgroundColor="var(--bg-secondary)",o.style.borderColor="var(--border-color)",o.style.color="var(--text-primary)",n.appendChild(a),n.appendChild(o),e.appendChild(n)}))):console.error("#accountManagementList element not found in #settingsAccountsPanel.");const t=$("#manageAccountsForm");t&&(t.onsubmit=handleManageAccountsSubmit);const n=$("#settingsCcLimitAmount");n&&(n.value=(state.creditCard&&state.creditCard.limit||0).toFixed(2),n.style.backgroundColor="var(--bg-secondary)",n.style.borderColor="var(--border-color)",n.style.color="var(--text-primary)");const a=$("#settingsCcLimitForm");a&&(a.onsubmit=e=>{e.preventDefault();const t=new FormData(a),n=parseFloat(t.get("ccLimitAmount"));isNaN(n)||n<0?showNotification("Invalid credit limit amount.","error"):(state.creditCard||(state.creditCard={limit:0,transactions:[]}),state.creditCard.limit=n,saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),showNotification(`Credit limit set to ${formatCurrency(n)}.`,"success"))});const o=$("#toggleCcSection");o&&(state.settings||(state.settings={initialSetupDone:!1,showCcDashboardSection:!0,theme:"dark"}),o.checked=void 0===state.settings.showCcDashboardSection||state.settings.showCcDashboardSection,o.dataset.listenerAttached||(o.onchange=()=>{state.settings||(state.settings={initialSetupDone:!1,showCcDashboardSection:!0,theme:"dark"}),state.settings.showCcDashboardSection=o.checked,saveData(),updateCcDashboardSectionVisibility(),showNotification(`Credit Card section on dashboard will now be ${o.checked?"shown":"hidden"}.`,"info")},o.dataset.listenerAttached="true"));const s=$("#addCategoryForm");if(s){s.onsubmit=addCategory;const e=s.querySelector("#newCategoryName");e&&(e.style.backgroundColor="var(--bg-secondary)",e.style.borderColor="var(--border-color)",e.style.color="var(--text-primary)")}renderCategorySettingsList()}function renderCategorySettingsList(){const e=$("#categorySettingsList");if(!e)return void console.error("#categorySettingsList element not found.");e.innerHTML="";[...state.categories].sort(((e,t)=>e.localeCompare(t))).forEach((t=>{const n=document.createElement("li");n.className="flex justify-between items-center p-2 rounded",n.style.backgroundColor="var(--bg-secondary)",n.style.borderColor="var(--border-color)",n.style.borderWidth="1px";const a=`<input type="text" value="${t}" data-original-name="${t}" class="bg-transparent border-none focus:ring-0 focus:outline-none p-0 flex-grow mr-2 text-sm">`,o=document.createElement("div");o.className="flex items-center gap-x-2";const s=`<button class="text-gray-400 hover:text-expense focus:outline-none" onclick="deleteCategory('${t}')" title="Delete Category"><i class="fas fa-times"></i></button>`;n.innerHTML=a,o.innerHTML='<button class="btn btn-primary btn-sm !py-0.5 !px-2 text-xs" onclick="renameCategory(this)">Save</button>'+s,n.appendChild(o),e.appendChild(n)}))}function renameCategory(e){const t=e.closest("li").querySelector('input[type="text"]'),n=t.value.trim(),a=t.dataset.originalName;if(!n)return showNotification("Category name cannot be empty.","error"),void(t.value=a);if(n===a)return;if(state.categories.some((e=>e.toLowerCase()===n.toLowerCase()&&e!==a)))return showNotification(`Category name "${n}" already exists.`,"error"),void(t.value=a);const o=state.categories.indexOf(a);if(o>-1){state.categories[o]=n,state.categories.sort(((e,t)=>e.localeCompare(t)));let e=0;state.transactions.forEach((t=>{t.category===a&&(t.category=n,e++)})),saveData(),populateDropdowns(),renderCategorySettingsList(),showNotification(`Category "${a}" renamed to "${n}". ${e} transaction(s) updated.`,"success")}else showNotification(`Original category "${a}" not found.`,"error"),t.value=a}function addCategory(e){e.preventDefault();const t=$("#newCategoryName"),n=t.value.trim();if(n){if(state.categories.some((e=>e.toLowerCase()===n.toLowerCase())))return showNotification(`Category "${n}" already exists.`,"warning"),void(t.value="");state.categories.push(n),state.categories.sort(((e,t)=>e.localeCompare(t))),saveData(),populateDropdowns(),renderCategorySettingsList(),t.value="",showNotification(`Category "${n}" added.`,"success")}else showNotification("Category name cannot be empty.","error")}function deleteCategory(e){if("Other"===e)return void showNotification("The 'Other' category cannot be deleted.","warning");state.transactions.some((t=>t.category===e))?showNotification(`Category "${e}" is in use and cannot be deleted. Reassign transactions first or rename the category.`,"error"):state.categories.includes(e)?confirm(`Are you sure you want to delete the category "${e}"? This action cannot be undone if the category is not in use.`)&&(state.categories=state.categories.filter((t=>t!==e)),saveData(),populateDropdowns(),renderCategorySettingsList(),showNotification(`Category "${e}" deleted.`,"success")):showNotification(`Category "${e}" not found.`,"error")}function handleSetCcLimitSubmit(e){e.preventDefault();const t=new FormData(e.target),n=parseFloat(t.get("ccLimitAmount"));isNaN(n)||n<0?showNotification("Invalid credit limit.","error"):(state.creditCard.limit=n,saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),closeModal("formModal"),showNotification(`Credit limit set to ${formatCurrency(n)}.`,"success"))}function updateCcDashboardSectionVisibility(){const e=$("#creditCardDashboardSection");if(e){let t=!0;state.settings&&void 0!==state.settings.showCcDashboardSection?t=state.settings.showCcDashboardSection:void 0===state.settings&&(state.settings={initialSetupDone:!1,showCcDashboardSection:!0},console.log("state.settings was undefined, initialized showCcDashboardSection to true")),e.style.display=t?"":"none"}$("#ccLimitSettingsCard")}function handleManageAccountsSubmit(e){e.preventDefault();const t=new FormData(e.target);let n=!1,a=[];if(state.accounts.forEach((e=>{const o=t.get(`accountName_${e.id}`),s=t.get(`accountBalance_${e.id}`);if(null===o||null===s)return void console.warn(`Inputs for account ${e.id} not found in form data.`);const i=o.trim(),r=parseFloat(s);if("cash"!==e.id&&(i?i!==e.name&&(state.accounts.some((t=>t.id!==e.id&&t.name.toLowerCase()===i.toLowerCase()))?a.push(`Account name "${i}" already exists. Please choose a unique name.`):(e.name=i,n=!0)):a.push(`Account name for "${e.name}" (ID: ${e.id}) cannot be empty.`)),isNaN(r))a.push(`Invalid balance entered for account "${e.name}". Please enter a valid number.`);else{const t=roundToTwoDecimals(r);Math.abs(e.balance-t)>.005?(e.balance=t,n=!0):e.balance!==t&&!1===n&&e.balance!==t&&(e.balance=t)}})),a.length>0)return a.forEach((e=>showNotification(e,"error",6e3))),void renderSettingsForm();if(n)state.settings&&!state.settings.initialSetupDone&&(state.settings.initialSetupDone=!0),saveData(),renderDashboard(),populateDropdowns(),renderSettingsForm(),showNotification("Account names and/or balances updated successfully.","success");else{let e=!1;state.accounts.forEach((n=>{const a=parseFloat(t.get(`accountBalance_${n.id}`));!isNaN(a)&&n.balance!==roundToTwoDecimals(a)&&Math.abs(n.balance-roundToTwoDecimals(a))<=.005&&(n.balance=roundToTwoDecimals(a),e=!0)})),e&&!n?(saveData(),renderDashboard(),populateDropdowns(),renderSettingsForm(),showNotification("Account balances formatted to two decimal places.","info")):n||showNotification("No changes detected in account names or balances.","info")}}function exportData(){try{const e=JSON.stringify(state,null,2),t=new Blob([e],{type:"application/json"}),n=URL.createObjectURL(t),a=document.createElement("a"),o=(new Date).toISOString().slice(0,19).replace(/[:T]/g,"-");a.download=`kaasi-backup-${o}.json`,a.href=n,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(n),showNotification("Data exported.","success")}catch(e){console.error("Export failed:",e),showNotification("Data export failed.","error")}}function importData(e){const t=e.target.files[0];t?showConfirmationModal("Import Data","Importing data will <strong class='text-warning'>OVERWRITE ALL</strong> current data. This action cannot be undone.<br><br>Are you sure you want to proceed?","Import & Overwrite","Cancel",(()=>{const n=new FileReader;n.onload=t=>{try{let e=JSON.parse(t.target.result);if(!e||"object"!=typeof e)throw new Error("Invalid data structure in imported file. Ensure it's a Kaasi backup.");Array.isArray(e.transactions)&&e.transactions.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount))})),Array.isArray(e.accounts)&&e.accounts.forEach((e=>{"number"==typeof e.balance&&(e.balance=roundToTwoDecimals(e.balance))})),Array.isArray(e.debts)&&e.debts.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.originalAmount&&(e.originalAmount=roundToTwoDecimals(e.originalAmount)),"number"==typeof e.remainingAmount&&(e.remainingAmount=roundToTwoDecimals(e.remainingAmount))})),Array.isArray(e.receivables)&&e.receivables.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.originalAmount&&(e.originalAmount=roundToTwoDecimals(e.originalAmount)),"number"==typeof e.remainingAmount&&(e.remainingAmount=roundToTwoDecimals(e.remainingAmount))})),Array.isArray(e.installments)&&e.installments.forEach((e=>{"number"==typeof e.monthlyAmount&&(e.monthlyAmount=roundToTwoDecimals(e.monthlyAmount)),"number"==typeof e.originalFullAmount&&(e.originalFullAmount=roundToTwoDecimals(e.originalFullAmount))})),e.creditCard&&"object"==typeof e.creditCard&&("number"==typeof e.creditCard.limit&&(e.creditCard.limit=roundToTwoDecimals(e.creditCard.limit)),Array.isArray(e.creditCard.transactions)&&e.creditCard.transactions.forEach((e=>{"number"==typeof e.amount&&(e.amount=roundToTwoDecimals(e.amount)),"number"==typeof e.paidAmount&&(e.paidAmount=roundToTwoDecimals(e.paidAmount)),e.paidAmount>=roundToTwoDecimals(e.amount-.005)?(e.paidOff=!0,e.paidAmount=e.amount):e.paidOff=!1}))),state=deepMerge(getDefaultState(),e),ensureDefaultAccounts(),ensureDefaultCategories(),state.accounts.forEach((e=>{isNaN(e.balance)||"number"!=typeof e.balance?e.balance=0:e.balance=roundToTwoDecimals(e.balance)})),state.creditCard||(state.creditCard={limit:0,transactions:[]}),isNaN(state.creditCard.limit)||"number"!=typeof state.creditCard.limit?state.creditCard.limit=0:state.creditCard.limit=roundToTwoDecimals(state.creditCard.limit),Array.isArray(state.creditCard.transactions)||(state.creditCard.transactions=[]),state.creditCard.transactions.forEach((e=>{"number"!=typeof e.amount||isNaN(e.amount)?e.amount=0:e.amount=roundToTwoDecimals(e.amount),"number"!=typeof e.paidAmount||isNaN(e.paidAmount)?e.paidAmount=0:e.paidAmount=roundToTwoDecimals(e.paidAmount),e.paidAmount>=roundToTwoDecimals(e.amount-.005)?(e.paidOff=!0,e.paidAmount=e.amount):e.paidOff=!1,e.timestamp||(e.timestamp=new Date(e.date).getTime())})),state.transactions.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.date).getTime())})),state.debts.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.dueDate).getTime())})),state.receivables.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.dateGiven).getTime())})),state.installments.forEach((e=>{e.timestamp||(e.timestamp=new Date(e.startDate).getTime())})),state.settings||(state.settings=getDefaultState().settings),state.settings.initialSetupDone=!0,saveData(),initializeUI(!0),showNotification("Data imported and sanitized successfully. Application refreshed.","success"),closeModal("settingsModal")}catch(e){console.error("Import failed during processing:",e),showNotification(`Import failed: ${e.message}`,"error",7e3)}finally{e&&e.target&&(e.target.value=null)}},n.onerror=()=>{showNotification("Failed to read the import file.","error"),e&&e.target&&(e.target.value=null)},n.readAsText(t)}),(()=>{e&&e.target&&(e.target.value=null),showNotification("Import cancelled.","info")}),"btn-primary"):e&&e.target&&(e.target.value=null)}function initiateDeleteAllData(){$("#initiateDeleteBtn").classList.add("hidden"),$("#deleteConfirmationSection").classList.remove("hidden"),resetDeleteSlider()}function cancelDeleteAllData(){$("#initiateDeleteBtn").classList.remove("hidden"),$("#deleteConfirmationSection").classList.add("hidden"),resetDeleteSlider()}let maxTranslateX=0,isDragging=!1;function setupDeleteSlider(){const e=$("#deleteSliderContainer"),t=$("#deleteSliderHandle"),n=e.querySelector(".slide-to-confirm-track");if(!e||!t||!n)return;let a=0,o=0;const s=()=>{maxTranslateX=e.offsetWidth-t.offsetWidth-4};window.resetDeleteSlider=()=>{isDragging=!1,o=0,t.style.transition="transform 0.2s ease-out, background-color 0.2s ease-out",n.style.transition="width 0.2s ease-out, background-color 0.2s ease-out",t.style.transform="translateX(0px)",n.style.width="0px",n.style.backgroundColor="var(--button-success-bg)",t.innerHTML='<i class="fas fa-arrow-right"></i>',t.style.backgroundColor="var(--accent-primary)",t.style.cursor="grab",e.style.cursor="pointer"};const i=o=>{s(),isDragging=!0,a=o-t.getBoundingClientRect().left,t.style.transition="none",n.style.transition="none",t.style.cursor="grabbing",e.style.cursor="grabbing"},r=s=>{if(!isDragging)return;let i=s-e.getBoundingClientRect().left-a;o=Math.max(0,Math.min(i,maxTranslateX)),t.style.transform=`translateX(${o}px)`,n.style.width=`${o+t.offsetWidth/2}px`},c=()=>{isDragging&&(isDragging=!1,t.style.cursor="grab",e.style.cursor="pointer",t.style.transition="transform 0.2s ease-out, background-color 0.2s ease-out",n.style.transition="width 0.2s ease-out, background-color 0.2s ease-out",o>=maxTranslateX-1?completeDeletion():resetDeleteSlider())};t.addEventListener("mousedown",(e=>i(e.clientX))),document.addEventListener("mousemove",(e=>{isDragging&&r(e.clientX)})),document.addEventListener("mouseup",c),t.addEventListener("touchstart",(e=>{e.preventDefault(),i(e.touches[0].clientX)}),{passive:!1}),document.addEventListener("touchmove",(e=>{isDragging&&(e.preventDefault(),r(e.touches[0].clientX))}),{passive:!1}),document.addEventListener("touchend",c),window.addEventListener("resize",(()=>{$("#deleteConfirmationSection")&&!$("#deleteConfirmationSection").classList.contains("hidden")&&(s(),resetDeleteSlider())}))}function completeDeletion(){const e=$("#deleteSliderHandle"),t=$(".slide-to-confirm-track");e.innerHTML='<i class="fas fa-check"></i>',e.style.backgroundColor="var(--button-success-bg)",t.style.width="100%",t.style.backgroundColor="var(--button-success-bg)",e.style.transform=`translateX(${maxTranslateX}px)`,isDragging=!1,e.style.pointerEvents="none",setTimeout((()=>{localStorage.removeItem(STORAGE_KEY),state=getDefaultState(),ensureDefaultAccounts(),ensureDefaultCategories(),initializeUI(!0),closeModal("settingsModal"),showNotification("All data deleted.","success"),e.style.pointerEvents="auto"}),500)}function openCashCounter(){const e=$("#cashCounterForm").querySelector(".grid");for(;e.children.length>3;)e.removeChild(e.lastChild);[5e3,1e3,500,100,50,20,10,5,2,1].forEach((t=>{const n=document.createElement("span");n.className="font-medium text-right pr-2 text-sm",n.textContent=`Rs. ${t}`;const a=document.createElement("input");a.type="number",a.min="0",a.dataset.denom=t,a.className="text-center bg-gray-600 border border-gray-500 rounded px-1 py-0.5 w-16 mx-auto text-sm",a.placeholder="0",a.oninput=calculateCashTotal;const o=document.createElement("span");o.className="text-right text-gray-400 text-sm",o.id=`cashTotal-${t}`,o.textContent=formatCurrency(0),e.appendChild(n),e.appendChild(a),e.appendChild(o)})),calculateCashTotal(),$("#cashCounterModal").style.display="block",$("#cashCounterComparison").innerHTML=""}function calculateCashTotal(){let e=0;$$('#cashCounterForm input[type="number"]').forEach((t=>{const n=parseInt(t.value)||0,a=parseInt(t.dataset.denom),o=n*a;e+=o;const s=$(`#cashTotal-${a}`);s&&(s.textContent=formatCurrency(o))})),$("#cashCounterTotal").textContent=formatCurrency(e);const t=state.accounts.find((e=>"cash"===e.id));if(t){const n=e-t.balance,a=$("#cashCounterComparison");Math.abs(n)<.01?a.innerHTML=`<p class="text-success">Counted cash matches calculated balance: ${formatCurrency(t.balance)}</p>`:a.innerHTML=n>0?`<p class="text-warning">Counted cash is ${formatCurrency(n)} MORE than calculated balance (${formatCurrency(t.balance)})</p>`:`<p class="text-danger">Counted cash is ${formatCurrency(Math.abs(n))} LESS than calculated balance (${formatCurrency(t.balance)})</p>`}}function closeModal(e){const t=$(`#${e}`);t&&(t.style.display="none"),"formModal"===e&&($("#dynamicForm").innerHTML="",$("#dynamicForm").onsubmit=null),"settingsModal"===e&&cancelDeleteAllData()}function openFormModal(e,t,n){$("#formModalTitle").textContent=e;const a=$("#dynamicForm");a.innerHTML=t,a.onsubmit=n,$("#formModal").style.display="block";const o=a.querySelector('input:not([type="hidden"]), select, textarea');o&&o.focus()}window.addEventListener("click",(e=>{$$(".modal").forEach((t=>{e.target===t&&"initialSetupModal"!==t.id&&closeModal(t.id)}))}));let currentConfirmCallback=null,currentCancelCallback=null;function showConfirmationModal(e,t,n="Confirm",a="Cancel",o,s,i="btn-danger"){const r=$("#confirmationModal"),c=$("#confirmationModalTitle"),l=$("#confirmationMessage"),d=$("#confirmModalConfirmBtn"),m=$("#confirmModalCancelBtn");if(!(r&&c&&l&&d&&m))return console.error("Confirmation modal elements not found!"),void(confirm(t)?"function"==typeof o&&o():"function"==typeof s&&s());c.textContent=e,l.innerHTML=t.replace(/\n/g,"<br>"),d.textContent=n,m.textContent=a,d.className=`btn ${i}`,m.className="btn btn-secondary",currentConfirmCallback=o,currentCancelCallback=s,d.replaceWith(d.cloneNode(!0)),m.replaceWith(m.cloneNode(!0));const u=$("#confirmModalConfirmBtn"),p=$("#confirmModalCancelBtn");u.onclick=()=>{"function"==typeof currentConfirmCallback&&currentConfirmCallback(),closeModal("confirmationModal")},p.onclick=()=>{"function"==typeof currentCancelCallback&&currentCancelCallback(),closeModal("confirmationModal")};const f=r.querySelector(".modal-close");f&&!f.dataset.listenerAttached&&(f.onclick=()=>{"function"==typeof currentCancelCallback&&currentCancelCallback&&currentCancelCallback()},f.dataset.listenerAttached="true"),r.style.display="block"}function openEditTransactionForm(e,t){openEditTransactionModal(e,t)}function openEditCcTransactionForm(e){openEditCcTransactionModal(e)}function handleBackupReminderDismiss(e){try{localStorage.setItem(e,getCurrentDateString()),console.log(`Backup reminder dismissed for key: ${e} on ${getCurrentDateString()}`)}catch(e){console.error("Error saving backup reminder dismissal state:",e)}closeModal("formModal")}function showBackupReminderPopup(e){openFormModal("Backup Reminder",'\n            <div class="text-center">\n                <i class="fas fa-cloud-download-alt fa-3x text-info mb-4"></i>\n                <p class="mb-6 text-gray-300">Friendly Reminder! It\'s a good day to consider backing up your expense data to keep it safe.</p>\n                <div class="flex flex-col sm:flex-row justify-center gap-3">\n                    <button type="button" id="backupNowBtnInModal" class="btn btn-primary flex-1">\n                        <i class="fas fa-download mr-2"></i>Backup Now\n                    </button>\n                    <button type="button" id="backupLaterBtnInModal" class="btn btn-secondary flex-1">\n                        I\'ll Do It Later\n                    </button>\n                </div>\n            </div>\n        ',null);const t=$("#backupNowBtnInModal"),n=$("#backupLaterBtnInModal");t&&(t.onclick=()=>{exportData(),handleBackupReminderDismiss(e)}),n&&(n.onclick=()=>{handleBackupReminderDismiss(e)})}function checkAndTriggerBackupReminder(){if(!state.settings.initialSetupDone&&0===state.transactions.length)return void console.log("Skipping backup reminder: Initial setup not done or no transactions.");const e=(new Date).getDay(),t=getCurrentDateString();let n=null;if(0===e?n="lastReminderShownForSunday":3===e&&(n="lastReminderShownForWednesday"),n)try{const e=localStorage.getItem(n);e!==t?(console.log(`Time to show backup reminder for: ${n}. Last shown: ${e}, Current: ${t}`),showBackupReminderPopup(n)):console.log(`Backup reminder already shown for ${n} on ${t}`)}catch(e){console.error("Error checking backup reminder state from localStorage:",e)}}let activeSettingsTab=null;const settingsTabsConfig=[{label:"Accounts",targetPanelId:"settingsAccountsPanel"},{label:"Credit Card",targetPanelId:"settingsCreditCardPanel"},{label:"Categories",targetPanelId:"settingsCategoriesPanel"},{label:"Data",targetPanelId:"settingsDataManagementPanel"}];function setupSettingsTabs(){const e=document.getElementById("settingsTabsContainer"),t=document.getElementById("settingsTabContent");e&&t?(e.innerHTML="",activeSettingsTab=null,settingsTabsConfig.forEach(((t,n)=>{const a=document.createElement("li"),o=document.createElement("button");if(o.className="settings-tab-button inline-block p-3 border-b-2 rounded-t-lg",o.textContent=t.label,o.dataset.tabTarget=`#${t.targetPanelId}`,o.addEventListener("click",(()=>{switchSettingsTab(o,t.targetPanelId)})),a.appendChild(o),e.appendChild(a),0===n)switchSettingsTab(o,t.targetPanelId);else{const e=document.getElementById(t.targetPanelId);e&&e.classList.add("hidden")}}))):console.error("Settings tab containers not found!")}function switchSettingsTab(e,t){const n=document.getElementById("settingsTabContent");if(!n)return;if(activeSettingsTab&&activeSettingsTab.button!==e){activeSettingsTab.button.classList.remove("active");const e=activeSettingsTab.button.dataset.tabTarget;if(e){const t=n.querySelector(e);t&&t.classList.add("hidden")}}e.classList.add("active");const a=document.getElementById(t);a?a.classList.remove("hidden"):console.warn(`Target panel with ID '${t}' not found.`),activeSettingsTab={button:e,panelId:t}}let monthlySearchDebounceTimer;function initializeUI(e=!1){if(console.log("Initializing UI..."),e||loadData(),!(state.settings&&void 0!==state.settings.initialSetupDone&&!1!==state.settings.initialSetupDone||e))return console.log("Initial setup not done. Opening wizard."),void openInitialSetupWizard();const t=$("#date");t&&(t.value=getCurrentDateString());const n=$("#ccDate");n&&(n.value=getCurrentDateString()),populateDropdowns(),renderDashboard(),updateCcDashboardSectionVisibility(),setupMonthlyView(),window.deleteSliderInitialized||(setupDeleteSlider(),window.deleteSliderInitialized=!0),displayAppVersion(),$("#transactionForm").onsubmit=handleTransactionSubmit,$("#ccTransactionForm").onsubmit=handleCcTransactionSubmit,$("#settingsBtn").onclick=openSettingsModal,$("#monthlyViewBtn").onclick=()=>{const e=$("#yearSelector"),t=(new Date).getFullYear(),n=e&&e.value?parseInt(e.value):t;renderMonthTabs(n);const a=$("#monthlySearchInput"),o=$("#clearMonthlySearchBtn");a&&(a.value=""),o&&(o.style.display="none",o.disabled=!0),$("#monthlyViewModal").style.display="block";const s=(new Date).getMonth(),i=$(`#monthTabs .tab-button[data-month="${s}"][data-year="${n}"]`);i?i.click():$$("#monthTabs .tab-button").length>0?$$("#monthTabs .tab-button")[0].click():$("#monthlyDetailsContainer").innerHTML='<p class="text-center text-gray-400">Select a month.</p>'};const a=$("#shortcutsHelpBtn");a?a.onclick=openShortcutsHelpModal:console.warn("#shortcutsHelpBtn not found.");const o=$("#monthlySearchInput"),s=$("#clearMonthlySearchBtn");o&&s?(o.value.trim()||(s.style.display="none",s.disabled=!0),o.addEventListener("input",(()=>{const e=o.value.trim().toLowerCase();e?(s.style.display="inline-flex",s.disabled=!1):(s.style.display="none",s.disabled=!0),clearTimeout(monthlySearchDebounceTimer),monthlySearchDebounceTimer=setTimeout((()=>{const t=$("#monthTabs .tab-button.active");if(t){renderMonthlyDetails(parseInt(t.dataset.month),parseInt(t.dataset.year),new Set,e,!0)}}),400)})),s.addEventListener("click",(()=>{clearTimeout(monthlySearchDebounceTimer),o.value="",s.style.display="none",s.disabled=!0;const e=$("#monthTabs .tab-button.active");if(e){renderMonthlyDetails(parseInt(e.dataset.month),parseInt(e.dataset.year),new Set,"",!0)}o.focus()}))):(o||console.error("#monthlySearchInput element NOT FOUND."),s||console.error("#clearMonthlySearchBtn element NOT FOUND."));const i=$("#openTransferModalBtn");i?i.onclick=()=>{const e=$("#transferMoneyModal");if(e){populateDropdowns();const t=$("#transferModalForm");t&&t.reset();const n=$("#modalTransferError");n&&n.classList.add("hidden"),e.style.display="block";const a=e.querySelector('input[type="number"], select');a&&a.focus()}else console.error("Transfer money modal (#transferMoneyModal) not found!")}:console.error("Open transfer modal button (#openTransferModalBtn) not found!");const r=$("#transferModalForm");r?r.onsubmit=handleTransferSubmit:console.error("Transfer modal form element (#transferModalForm) not found!"),$("#exportDataBtn").onclick=exportData,$("#importDataInput").onchange=importData,$("#initiateDeleteBtn").onclick=initiateDeleteAllData,$("#cancelDeleteBtn").onclick=cancelDeleteAllData,$("#addDebtBtn").onclick=openAddDebtForm,$("#addReceivableBtn").onclick=openAddReceivableForm,$("#addInstallmentBtn").onclick=openAddInstallmentForm,$("#cashCounterBtn").onclick=openCashCounter,$("#ccHistoryBtn").onclick=openCcHistoryModal;const c=$("#viewDebtsBtn");c&&(c.onclick=()=>{renderDebtList(),$("#debtsViewModal").style.display="block"});const l=$("#viewReceivablesBtn");l&&(l.onclick=()=>{renderReceivableList(),$("#receivablesViewModal").style.display="block"});const d=$("#transactionType"),m=$("#categoryGroup"),u=$("#description"),p=()=>{d&&m&&("income"===d.value?(m.style.display="none",$("#category").required=!1,u&&(u.placeholder="e.g., Monthly Salary")):(m.style.display="block",$("#category").required=!0,u&&(u.placeholder="e.g., Lunch, Groceries")))};d&&(d.onchange=p,p()),window.countdownInterval||(window.countdownInterval=setInterval((()=>{const e=$("#totalOwed"),t=$("#totalOwedToMe");e&&state.debts&&(e.textContent=`Total: ${formatCurrency(state.debts.reduce(((e,t)=>e+t.remainingAmount),0))}`),t&&state.receivables&&(t.textContent=`Total: ${formatCurrency(state.receivables.reduce(((e,t)=>e+t.remainingAmount),0))}`),state.installments&&renderInstallmentList()}),36e5)),!window.backupReminderInterval&&state.settings&&(checkAndTriggerBackupReminder(),window.backupReminderInterval=setInterval(checkAndTriggerBackupReminder,36e5),console.log("Backup reminder interval started.")),document.body.dataset.keyboardListenerAttached||(document.addEventListener("keydown",handleKeyboardShortcuts),document.body.dataset.keyboardListenerAttached="true",console.log("Keyboard shortcut listener attached."))}document.addEventListener("DOMContentLoaded",(()=>{console.log("DOM Loaded. Initializing..."),loadData(),initializeUI(),document.addEventListener("visibilitychange",(()=>{if("visible"===document.visibilityState){console.log("Page became visible, attempting to focus and update dates."),window.focus();const e=$("#date");e&&(e.value=getCurrentDateString());const t=$("#ccDate");t&&(t.value=getCurrentDateString())}}));const e=document.getElementById("preloader"),t=document.getElementById("app-content");e&&t?(console.log("Preloader will be shown for 1.25 seconds."),setTimeout((()=>{console.log("Preloader timer finished. Hiding preloader, showing app content."),e.classList.add("hidden"),t.classList.add("visible"),setTimeout((()=>{e.style.display="none",console.log("Preloader display set to 'none' after fade-out.")}),750)}),1250)):(e||console.error("Preloader element with ID 'preloader' not found."),t||console.error("App content element with ID 'app-content' not found."),t&&(t.classList.add("visible"),console.warn("Attempted to show app content due to missing preloader elements.")),e&&(e.style.display="none"))}));